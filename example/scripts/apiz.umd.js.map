{"version":3,"file":"apiz.umd.js","sources":["../../../src/core.ts","../../../src/querystring.ts","apiz.js"],"sourcesContent":["/* global DEBUG */\nimport { Omit } from 'type-fest';\n\nexport type HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\ntype HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ntype Callable = (...args: Array<any>) => any;\n\n// from https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ninterface KVObject {\n\t[k: string]: any;\n}\n\nexport type Serialize2QueryString = (obj: any) => string;\n\ninterface APIMetaInfoWithURL<APIzClientType extends string = string, APIzClientMeta = any> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: APIzClientType;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: APIzClientMeta;\n}\n\ninterface APIMetaInfoWithPath<APIzClientType extends string = string, APIzClientMeta = any> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: APIzClientType;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: APIzClientMeta;\n}\n\nexport type APIMetaInfo<APIzClientType extends string = string, APIzClientMeta = any> = APIMetaInfoWithURL<APIzClientType, APIzClientMeta> | APIMetaInfoWithPath<APIzClientType, APIzClientMeta>;\n\ninterface APIMetaWithoutBaseURL<APIzClientType extends string = string, APIzClientMeta = any> {\n\t[key: string]: APIMetaInfo<APIzClientType, APIzClientMeta>;\n}\n\ninterface APIMetaWithBaseURL {\n\t_baseURL?: string;\n}\n\n// 为什么不把这两个放一个接口, 放一个接口的话, 索引类型还需要联合undefined和string\n// 然而对于APIMetaInfo, 是不允许undefined和string, 所以拆两个接口用&\nexport type APIMeta<APIzClientType extends string = string, APIzClientMeta = any> = APIMetaWithBaseURL & Omit<APIMetaWithoutBaseURL<APIzClientType, APIzClientMeta>, '_baseURL'>;\n\nexport interface ClientRequestOptions<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any> {\n\turl: string;\n\tname: string;\n\tmeta?: APIzClientMeta;\n\toptions?: RawRequestOptions;\n\ttype?: APIzClientType;\n\tbody?: any;\n}\n\nexport type APIzClient<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> = {\n\t[K in Method]?: (options: ClientRequestOptions<RawRequestOptions, APIzClientType, APIzClientMeta>) => Promise<any>;\n};\n\nexport interface GlobalOptions<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> {\n\tclient?: Client;\n\tparamRegex?: RegExp;\n\tdefaultType?: string;\n\timmutableMeta?: boolean;\n\treset?: boolean;\n\tquerystring?(obj: object): string;\n}\n\nexport interface APIzOptions<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> {\n\tbaseURL?: string;\n\tclient?: Client;\n\timmutableMeta?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\n// emmm...这里比较尴尬, 照理来说应该是下面这样, 但是这样Method不是确定的, extends需要继承一个确定的类型\n// interface ParsedAPIMetaInfo<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method> {\ninterface ParsedAPIMetaInfo<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any> extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta> {\n\turl: string;\n\tname: string;\n\tmeta?: APIzClientMeta;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: HTTPMethodLowerCase;\n\ttype: APIzClientType;\n\tpathParams: boolean;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n}\n\nexport interface APIzRequest<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any> {\n\t// with body\n\t(body?: any, params?: KVObject, query?: KVObject | string, type?: APIzClientType): Promise<any>;\n\t// (body?: any, params?: KVObject, query?: KVObject | string): Promise<any>;\n\t(body: any, params: KVObject | string, type?: APIzClientType): Promise<any>;\n\t// (body: any, params: KVObject): Promise<any>;\n\t// (body: any, query: KVObject | string, type: T): Promise<any>;\n\t// (body: any, query: KVObject | string): Promise<any>;\n\t(body: any, type: APIzClientType): Promise<any>;\n\t// (body: any): Promise<any>;\n\t// without body\n\t(params: KVObject, query?: KVObject | string): Promise<any>;\n\t// (params: KVObject): Promise<any>;\n\t(query: KVObject | string): Promise<any>;\n\t// (): Promise<any>;\n\t(rawRequestOptions: RawRequestOptions, optionsFlag: boolean): Promise<any>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: APIzClientMeta;\n\treadonly type: APIzClientType;\n\treadonly pathParams: boolean;\n}\n\n\ntype ProxyMeta<RawRequestOptions, Meta extends APIMeta<APIzClientType, APIzClientMeta>, APIzClientType extends string = string, APIzClientMeta = any> = {\n\t[K in keyof Meta]: APIzRequest<RawRequestOptions, APIzClientType, APIzClientMeta>;\n};\n\ninterface APIzMethod<APIzClientType extends string = string, APIzClientMeta = any> {\n\tadd: (name: string, apiInfo: APIMetaInfo<APIzClientType, APIzClientMeta>) => this;\n\tremove: (name: string) => this;\n}\n\nexport type APIzInstance<RawRequestOptions, Meta extends APIMeta<APIzClientType, APIzClientMeta>, APIzClientType extends string = string, APIzClientMeta = any> =  APIzMethod<APIzClientType, APIzClientMeta> & Omit<ProxyMeta<RawRequestOptions, Meta, APIzClientType, APIzClientMeta>, 'add' | 'remove'>;\n\n\nconst toString = (Map as unknown as () => any).call.bind(Object.prototype.toString);\nconst isObj = (o: any): boolean => toString(o) === '[object Object]';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isEnumerable = (Map as unknown as () => any).call.bind(Object.prototype.propertyIsEnumerable);\n\nlet defaultType: string | undefined,\n\tglobalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\t// 这东西有没有, 是什么类型, 应该只能在运行时才能确定了, 或者分析控制流?\n\t// 那就随便写个类型吧...等到使用处as一下好了\n\tglobalClient: APIzClient<any, any, any, HTTPMethodLowerCase> | undefined,\n\tglobalImmutableMeta: boolean | undefined = false;\n\n// ES2018+, 是讲这个特性没法被babel转译,\n// 那既然都用ES2018了, 不如把能用的特性都用上好了...\nconst defaultParamRegex = /(?<=\\/):((\\w|-)+)/g,\n\tslashRegex = /(?<!:)(\\/\\/)/g,\n\tmethodMap = {\n\t\tget: noBodyRequest,\n\t\thead: noBodyRequest,\n\t\tpost: bodyRequest,\n\t\tput: bodyRequest,\n\t\tpatch: bodyRequest,\n\t\t// 尽管浏览器支持OPTIONS和DELETE带body, 但是考虑到不常用,\n\t\t// 还是默认它们不带body, 如果需要的话, 可以直接开启完整选项加入body\n\t\t// 有空改成可配置吧\n\t\toptions: noBodyRequest,\n\t\tdelete: noBodyRequest\n\t};\n\n\nfunction parseApiInfo<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase>(\n\tname: string,\n\trawInfo: UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>,\n\t{ baseURL: gBaseURL, paramRegex, querystring, client }: {\n\t\tbaseURL?: string;\n\t\tparamRegex: RegExp;\n\t\tquerystring: Serialize2QueryString;\n\t\tclient: Client;\n\t}\n): ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta> | never {\n\t// tslint:disable-next-line\n\tlet { url, baseURL, path, meta, method = 'GET' as HTTPMethodUpperCase, type = defaultType as APIzClientType, pathParams = false } = rawInfo;\n\tconst info = {} as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, '/');\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tmethod = method.toUpperCase() as HTTPMethodUpperCase;\n\tconst methodLowerCase = method.toLowerCase() as HTTPMethodLowerCase;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(method)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${method}.`);\n\t}\n\tif (!isFn((client as any)[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = method;\n\tinfo.methodLowerCase = methodLowerCase;\n\t// 前面已经确保了client实现了该method\n\tinfo[methodLowerCase] = (client as any)[methodLowerCase];\n\tinfo.type = type;\n\tinfo.pathParams = pathParams;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: KVObject): (m: string, v: string) => string | never {\n\treturn (m: string, v: string): string | never => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\n\n// 其实noBodyRequest和bodyRequest我们可以合并成一个,\n// 因为我们已经知道method了, 也就可以知道它是否会带body,\n// 但是考虑到让代码更加清晰一点, 还是拆成两个吧, 这点\n// 代码重复算是可以接受. 另一方面讲, 其实也可以让接口只\n// 实现一个request方法就好, 而不用对每个HTTP方法都实现一个\n// 对应的方法, 因为我们也可以把method传过去\nfunction noBodyRequest<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any>(this: ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>, ...args: Array<any>): Promise<any> | never {\n\tconst { methodLowerCase, pathParams, regex, querystring } = this;\n\tlet params, query, qs, url = this.url;\n\tif (args[1] === true) {\n\t\t// 接口处记得检测对象是否为空\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[0];\n\t\tquery = args[1];\n\t} else {\n\t\tquery = args[0];\n\t}\n\n\tif (params) {\n\t\turl = url.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction bodyRequest<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any>(this: ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>, ...args: Array<any>): Promise<any> | never {\n\t// $以区分全局变量\n\tconst { methodLowerCase, type: $defaultType, pathParams, regex, querystring } = this;\n\tlet params, query, body, type, qs, url = this.url;\n\tif (args[1] === true) {\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\ttype,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[1];\n\t\tquery = args[2];\n\t\ttype = args[3] || $defaultType;\n\t} else {\n\t\tquery = args[1];\n\t\ttype = args[2] || $defaultType;\n\t}\n\tbody = args[0];\n\n\tif (params) {\n\t\turl = url.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\t// 这里实际上会造成带body的query的集合和不带body的query的集合不一致,\n\t// 不过考虑实际情况这样的不一致也是可以接受\n\tif (isStr(query) && !query.includes('=')) {\n\t\ttype = query;\n\t} else if (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\ttype,\n\t\tbody,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction createAPI<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any>(info: ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>): APIzRequest<RawRequestOptions, APIzClientType, APIzClientMeta> | never {\n\t// const fn = methodMap[info.method]\n\tconst f = (methodMap as unknown as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>)[info.methodLowerCase];\n\t// 因为在parseApiInfo的时候已经判断过了, 所以这里不需要判断了, 可以确定f不为空\n\t// 但是如果哪天重构把前面的判断去掉了, 这里记得加回来\n\t// if (!f) {\n\t// \tthrow new Error(`APIzClient must implement ${info.methodLowerCase} method.`);\n\t// }\n\tconst fn = f!.bind(info);\n\n\t['url', 'method', 'meta', 'type', 'pathParams'].forEach((k: string) => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn fn as APIzRequest<RawRequestOptions, APIzClientType, APIzClientMeta>;\n}\n\n\n\n\n// 理想情况下是这样的\n// class APIz<T, M, N extends APIMeta<T, M>> {\n// \tpublic add: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n// \tpublic remove: (name: string) => this;\n// \t[K in key of N]: object;\n// \tconstructor(apiMeta: N, options: APIzOptions<>) {\n\t\t\n// \t}\n// }\n\n// type ProxyMeta<T, M, N extends APIMeta<T, M>> = {\n// \t[K in keyof N]: object;\n// };\n\n// TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithBody<T extends string> = ((body: any, params: KVObject, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, params: KVObject, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject) => Promise<any>)\n// \t| ((body: any, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, type: T) => Promise<any>)\n// \t| ((body: any) => Promise<any>);\n\n// // TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithoutBody = ((params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((params: KVObject) => Promise<any>)\n// \t| ((query: KVObject | string) => Promise<any>)\n// \t| (() => Promise<any>);\n\n\n\n\n\n// type APIzConstructor<C, T extends string, M, N extends APIMeta<T, M>> =\tnew (apiMeta: N, options: APIzOptions<C>) => APIzInstance<T, M, N>;\n// class不知道怎么实现mapped types, 用function又没办法直接\n// 实现上面的constructor接口, 只能是让ts中不允许new调用, js中运行new调用了\n// 其实也没什么影响, 除了看上去不那么面向对象少个new\n// 另外泛型参数过多有什么好的解决办法?\nfunction APIz<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, Meta extends APIMeta<APIzClientType, APIzClientMeta>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase>(apiMeta: Meta, options?: APIzOptions<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>): APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta> | never {\n\tlet baseURL: string | undefined,\n\t\timmutableMeta: boolean,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString,\n\t\tclient: Client,\n\t\tmeta = {} as APIMeta<APIzClientType, APIzClientMeta>;\n\n\tisStr(apiMeta._baseURL) && (baseURL = apiMeta._baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\t// 这里undefined没什么影响, 视为boolean没问题\n\t\timmutableMeta = globalImmutableMeta as boolean,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring as Serialize2QueryString,\n\t\tclient = globalClient as Client\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tif (immutableMeta) {\n\t\tmeta = apiMeta || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apiMeta) {\n\t\t\tif (isObj(apiMeta[key])) {\n\t\t\t\tmeta[key] = parseApiInfo<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>(key, apiMeta[key as keyof APIMeta<APIzClientType, APIzClientMeta>] as UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>, groupOptions);\n\t\t\t} else if (key !== '_baseURL') {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy({}, {\n\t\tget(target: object, key: string | symbol, receiver: APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta>): any {\n\t\t\tif (!meta[key as string] || !isEnumerable(meta, key)) {\n\t\t\t\treturn Reflect.get(target, key);\n\t\t\t} else if (!(meta[key as string] as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>).init) {\n\t\t\t\tmeta[key as string] = parseApiInfo<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>(key as string, meta[key as string] as UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>, groupOptions);\n\t\t\t}\n\t\t\t// 到这里有个meta[key]在运行时从APIMetaInfo到ParsedAPIMetaInfo的类型转换\n\t\t\t// 只能是强行as了\n\t\t\tconst apiFn = createAPI(meta[key as string] as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>);\n\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\treturn apiFn;\n\t\t},\n\t\tgetPrototypeOf(): object {\n\t\t\treturn APIz.prototype;\n\t\t}\n\t});\n\n\tconst self = Object.create(pxy) as APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta>;\n\tself.remove = function (name: string): APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta> {\n\t\tthis[name] && ((meta[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\tself.add = function (name: string, apiInfo: APIMetaInfo<APIzClientType, APIzClientMeta>): APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta> {\n\t\tif (meta[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tmeta[name] = parseApiInfo<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>(name, apiInfo as UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>, groupOptions);\n\t\t// 同前面一样存在运行时类型转换\n\t\tthis[name] = createAPI(meta[name] as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>);\n\t\treturn this;\n\t};\n\treturn self;\n}\n\nexport { APIz };\n\nexport function config<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase>(\n\t{\n\t\tquerystring, paramRegex, immutableMeta, client, reset, defaultType: dt\n\t}: GlobalOptions<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method> = { reset: true }\n): void {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalImmutableMeta = immutableMeta;\n\tglobalClient = client;\n\tdefaultType = dt;\n\treset && (globalQuerystring = globalParamRegex = globalClient = defaultType = undefined, globalImmutableMeta = false);\n}\n","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj: any): string {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\t(k: string) =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v == null ? '' : v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k] == null ? '' : obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n};","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultType: 'json'\n});\n\nexport * from './core';"],"names":["toString","Map","call","bind","Object","prototype","isObj","o","isFn","f","isStr","s","isEnumerable","propertyIsEnumerable","defaultType","globalQuerystring","globalParamRegex","globalClient","globalImmutableMeta","defaultParamRegex","slashRegex","methodMap","get","noBodyRequest","head","post","bodyRequest","put","patch","options","delete","parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","url","path","meta","method","type","pathParams","info","bURL","Error","TypeError","JSON","stringify","replace","toUpperCase","methodLowerCase","toLowerCase","includes","regex","init","replaceParams","params","m","v","encodeURIComponent","args","query","qs","$defaultType","body","createAPI","fn","forEach","k","defineProperty","value","enumerable","writable","APIz","apiMeta","immutableMeta","_baseURL","groupOptions","key","console","warn","pxy","Proxy","target","receiver","Reflect","apiFn","set","getPrototypeOf","self","create","remove","undefined","add","apiInfo","config","reset","dt","RegExp","obj","keys","map","Array","isArray","join"],"mappings":"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"}