/**
 * @Version 4.0.5
 * @Author: ta7sudan
 * @Repo: https://github.com/ta7sudan/apiz-ng#readme
 * @License: MIT
 */'use strict';Object.defineProperty(exports,"__esModule",{value:!0});const toString=Map.call.bind(Object.prototype.toString),isStr=a=>a&&"string"==typeof a,isFn=a=>"function"==typeof a,isObj=a=>"[object Object]"===toString(a),isEnumerable=Map.call.bind(Object.prototype.propertyIsEnumerable);let globalQuerystring,globalParamRegex,globalClient,defaultContentType,defaultResponseType,globalIsArgsImmutable=!1;const defaultParamRegex=/:((\w|-)+)/g,slashRegex=/\/\//g,replaceSlash=(a,b)=>6>=b?a:"/";function isAPIInfoWithURL(a){return!!a.url}function parseApiInfo(a,b,{baseURL:c,paramRegex:d,querystring:e,client:f}){const{method:h="GET",contentType:i=defaultContentType,responseType:j=defaultResponseType,meta:g}=b;let k,l,m;if("remove"===a||"add"===a)throw new Error("\"remove\" and \"add\" is preserved key.");isAPIInfoWithURL(b)?k=b.url:(l=b.baseURL,m=b.path);const n={},o=l||c;if(!isObj(b))throw new TypeError(`API ${a} expected an object, but received ${JSON.stringify(b)}.`);if(isStr(k))n.url=k;else if(isStr(o))n.url=(o+(m||"")).replace(slashRegex,replaceSlash);else throw new Error(`API "${a}" must set url or baseURL correctly.`);const p=h.toUpperCase(),q=h.toLowerCase();if(-1===["GET","HEAD","POST","PUT","PATCH","DELETE","OPTIONS"].indexOf(p))throw new Error(`Unsupported HTTP method: ${p}.`);if(!isFn(f[q]))throw new Error(`client must implement a ${q} function.`);const r=n.url.split(/\/(?=\w|:)/g),s=/^(https?:|\/)/.test(r[0])?2:1;return n.baseURL=r.slice(0,s).join("/"),n.path=`/${r.slice(s).join("/")}`,n.name=a,n.meta=g,n.method=p,n.methodLowerCase=q,n.client=f,n.contentType=i,n.responseType=j,n.regex=d,n.querystring=e,n.init=!0,n}function replaceParams(a){return(b,c)=>{if(null==a[c])throw new Error(`Can't find a property "${c}" in params.`);return encodeURIComponent(a[c])}}function request(a,b){const{methodLowerCase:c,contentType:d,responseType:e,regex:f,querystring:g,baseURL:h,path:i,client:j,meta:k}=this;let l,{query:m,params:n,body:o,headers:p,contentType:q,responseType:r,handleError:s}=a||{},t=this.url;return!0===b?j[c]({url:t,name:this.name,handleError:s,options:a}):(null==q&&"get"!==c&&"head"!==c&&(q=d),null==r&&(r=e),n&&(t=h+i.replace(f,replaceParams(n))),m&&(l=g(m),t=-1===t.indexOf("?")?`${t}?${l}`:`${t}&${l}`),j[c]({url:t,name:this.name,handleError:s,meta:k,contentType:q,responseType:r,body:o,headers:p,query:m}))}function createAPI(a){const b=request.bind(a);return["url","method","meta","type"].forEach(c=>{Object.defineProperty(b,c,{value:a[c],enumerable:!0,writable:!1})}),b}function APIz(a,b){let c,d,e,f,g,h={};if(isStr(a.baseURL)&&(c=a.baseURL),({baseURL:c=c,immutable:d=globalIsArgsImmutable,paramRegex:e=globalParamRegex||defaultParamRegex,querystring:f=globalQuerystring,client:g=globalClient}=b||{}),!isFn(f))throw new Error("A querystring function must set.");if(!g)throw new Error("A client must set.");const i={baseURL:c,paramRegex:e,querystring:f,client:g},j=a.apis;if(d)h=j||{};else for(const a in j)isObj(j[a])?h[a]=parseApiInfo(a,j[a],i):console.warn(`The ${a} in meta is not an object.`);const k=new Proxy({},{get(a,b,c){if(!h[b]||!isEnumerable(h,b))return Reflect.get(a,b);h[b].init||(h[b]=parseApiInfo(b,h[b],i));const d=createAPI(h[b]);return Reflect.set(c,b,d),d},getPrototypeOf(){return APIz.prototype}}),l=Object.create(k);return l.remove=function(a){return this[a]&&(h[a]=this[a]=void 0),this},l.add=function(a,b){if(h[a])throw new Error(`API "${a}" already exists.`);return h[a]=parseApiInfo(a,b,i),this[a]=createAPI(h[a]),this},l}function config({querystring:a,paramRegex:b,immutable:c,client:d,reset:e,defaultContentType:f,defaultResponseType:g}={reset:!0}){isFn(a)&&(globalQuerystring=a),b instanceof RegExp&&(globalParamRegex=b),globalIsArgsImmutable=c,globalClient=d,defaultContentType=f,defaultResponseType=g,e&&(globalQuerystring=globalParamRegex=globalClient=defaultContentType=defaultResponseType=void 0,globalIsArgsImmutable=!1)}const querystring=function(a){return"[object Object]"===Object.prototype.toString.call(a)?Object.keys(a).map(b=>Array.isArray(a[b])?a[b].map(a=>`${encodeURIComponent(b)}=${encodeURIComponent(null==a?"":a)}`).join("&"):`${encodeURIComponent(b)}=${encodeURIComponent(null==a[b]?"":a[b])}`).join("&"):"string"==typeof a?a:JSON.stringify(a)};config({querystring,defaultContentType:"json",defaultResponseType:"json"}),exports.APIz=APIz,exports.config=config;
//# sourceMappingURL=apiz.cjs.js.map
