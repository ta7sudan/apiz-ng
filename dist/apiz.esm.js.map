{"version":3,"file":"apiz.esm.js","sources":["../src/core.ts","../src/querystring.ts","../src/index.ts"],"sourcesContent":["export type HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\nexport type HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ninterface APIInfoWithURL<ContentType, ResponseType, Meta> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\tmeta?: Meta;\n}\n\ninterface APIInfoWithPath<ContentType, ResponseType, Meta> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\tmeta?: Meta;\n}\n\nexport type APIInfo<ContentType = any, ResponseType = any, Meta = any> =\n\t| APIInfoWithURL<ContentType, ResponseType, Meta>\n\t| APIInfoWithPath<ContentType, ResponseType, Meta>;\n\nexport interface APIGroup<\n\tT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>\n> {\n\tbaseURL?: string;\n\tapis: T;\n}\n\nexport interface ClientRequestOptions<RawRequestOptions, ContentType, ResponseType, Meta> {\n\turl: string;\n\tname: string;\n\tmeta?: Meta;\n\toptions?: RawRequestOptions;\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\thandleError?: boolean;\n}\n\nexport type APIzClientRequest<RawRequestOptions, ContentType, ResponseType, Meta> = (\n\toptions: ClientRequestOptions<RawRequestOptions, ContentType, ResponseType, Meta>\n) => Promise<any>;\n\nexport type APIzClient<\nRawRequestOptions,\nContentType,\nResponseType,\nMeta,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = {[k in Method]: APIzClientRequest<RawRequestOptions, ContentType, ResponseType, Meta>};\n\nexport type Serialize2QueryString = (obj: any) => string;\n\nexport interface APIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tResponseType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tbaseURL?: string;\n\tclient?: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n\timmutable?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\nexport interface GlobalAPIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tResponseType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tclient?: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n\tparamRegex?: RegExp;\n\tdefaultContentType?: ContentType;\n\tdefaultResponseType?: ResponseType;\n\timmutable?: boolean;\n\treset?: boolean;\n\tquerystring?: (obj: any) => string;\n}\n\ntype Callable = (...args: Array<any>) => any;\n\ninterface ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase> {\n\turl: string;\n\tbaseURL: string;\n\tpath: string;\n\tname: string;\n\tmeta?: Meta;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: Method;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n\tclient: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n}\n\ntype ContentTypeFrom<R> = R extends Record<string, APIInfo<infer C, infer M>>\n\t? C extends unknown\n\t\t? any\n\t\t: C\n\t: never;\n\ntype ResponseTypeFrom<R> = R extends Record<string, APIInfo<infer C, infer M>>\n\t? M extends unknown\n\t? any\n\t: M\n\t: never;\n\ntype ProxyGroup<RawRequestOptions, T extends Record<string, APIInfo<any, any>>> = {\n\t[k in keyof T]: RequestWithoutThis<RawRequestOptions, ContentTypeFrom<T>, ResponseTypeFrom<T>>\n};\n\nexport type APIzInstance<\nRawRequestOptions = any,\nT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = Omit<ProxyGroup<RawRequestOptions, T>, 'remove' | 'add'> & {\n\tremove: (name: string) => APIzInstance<RawRequestOptions, T, Method>;\n\tadd: (\n\t\tname: string,\n\t\tapiInfo: T extends Record<string, infer I>\n\t\t? I extends APIInfo<infer C, infer M>\n\t\t? APIInfo<C extends unknown ? any : C, M extends unknown ? any : M>\n\t\t: never\n\t\t: never\n\t) => APIzInstance<RawRequestOptions, T, Method>;\n};\n\nexport interface APIzRequestOptions<ContentType, ResponseType> {\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\thandleError?: boolean;\n}\n\nexport type RequestWithoutThis<RawRequestOptions, ContentType, ResponseType> = (\n\toptions?: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions,\n\tisRawOption?: boolean\n) => Promise<any>;\n\ntype Request<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase> = \n\t((\n\t\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>,\n\t\toptions?: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions,\n\t\tisRawOption?: boolean\n) => Promise<any>);\n\nexport interface APIzRequest<RawRequestOptions, ContentType, ResponseType, Meta> {\n\t(options: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions, isRawOption?: boolean): Promise<\n\t\tany\n\t>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: Meta;\n\treadonly contentType: ContentType;\n\treadonly responseType: ResponseType;\n}\n\nconst toString = ((Map as unknown) as () => any).call.bind(Object.prototype.toString);\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isObj = (o: any): boolean => toString(o) === '[object Object]';\nconst isEnumerable = ((Map as unknown) as () => any).call.bind(\n\tObject.prototype.propertyIsEnumerable\n);\n\nlet globalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\tglobalIsArgsImmutable: boolean | undefined = false,\n\tglobalClient: APIzClient<any, any, any, any, any> | undefined,\n\tdefaultContentType: any,\n\tdefaultResponseType: any;\n\nconst defaultParamRegex = /:((\\w|-)+)/g,\n\tslashRegex = /\\/\\//g,\n\treplaceSlash = (m: string, o: number): string => (o <= 6 ? m : '/');\n\nfunction isAPIInfoWithURL<ContentType, ResponseType, Meta>(v: any): v is APIInfoWithURL<ContentType, ResponseType, Meta> {\n\treturn !!v.url;\n}\n\nfunction parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase>(\n\tname: string,\n\trawInfo: APIInfo<ContentType, ResponseType, Meta>,\n\t{\n\t\tbaseURL: gBaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t}: {\n\tbaseURL?: string;\n\tparamRegex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tclient: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n\t}\n): ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method> {\n\tconst {\n\t\tmethod = 'GET' as HTTPMethod,\n\t\tcontentType = defaultContentType as ContentType | undefined,\n\t\tresponseType = defaultResponseType as ResponseType | undefined,\n\t\tmeta\n\t} = rawInfo;\n\tlet url: string | undefined, baseURL: string | undefined, path: string | undefined;\n\n\t// 照理讲放parseApiInfo外面显得更合理一点, 不过考虑到add和实例化的时候都要校验\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\n\tif (isAPIInfoWithURL<ContentType, ResponseType, Meta>(rawInfo)) {\n\t\turl = rawInfo.url;\n\t} else {\n\t\tbaseURL = rawInfo.baseURL;\n\t\tpath = rawInfo.path;\n\t}\n\n\tconst info = {} as ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, replaceSlash);\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tconst methodUpperCase = method.toUpperCase() as HTTPMethodUpperCase,\n\t\tmethodLowerCase = method.toLowerCase() as Method;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(methodUpperCase)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${methodUpperCase}.`);\n\t}\n\tif (!isFn(client[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tconst parts = info.url.split(/\\/(?=\\w|:)/g),\n\t\toffset = /^(https?:|\\/)/.test(parts[0]) ? 2 : 1;\n\tinfo.baseURL = parts.slice(0, offset).join('/');\n\tinfo.path = `/${parts.slice(offset).join('/')}`;\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = methodUpperCase;\n\tinfo.methodLowerCase = methodLowerCase;\n\tinfo.client = client;\n\tinfo.contentType = contentType;\n\tinfo.responseType = responseType;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: Record<string, string>): (m: string, v: string) => string | never {\n\treturn (m: string, v: string): string | never => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\nfunction request<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase>(\n\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>,\n\toptions?: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions,\n\tisRawOption?: boolean\n): Promise<any> {\n\t// $以区分全局变量\n\tconst {\n\t\tmethodLowerCase,\n\t\tcontentType: $defaultContentType,\n\t\tresponseType: $defaultResponseType,\n\t\tregex,\n\t\tquerystring,\n\t\tbaseURL,\n\t\tpath,\n\t\tclient,\n\t\tmeta\n\t} = this;\n\tlet qs,\n\t\t// tslint:disable-next-line\n\t\t{query, params, body, headers, contentType, responseType, handleError} = (options as APIzRequestOptions<ContentType, ResponseType> | undefined) || {} as APIzRequestOptions<ContentType, ResponseType>,\n\t\turl = this.url;\n\n\tif (isRawOption === true) {\n\t\treturn client[methodLowerCase]({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\thandleError,\n\t\t\toptions: options as RawRequestOptions | undefined\n\t\t});\n\t}\n\n\t// GET, HEAD没有body没有content-type, 如果加上了content-type, 会破坏get默认为简单请求的\n\t// 行为, 从而导致跨域协商\n\t// tslint:disable-next-line\n\tif (contentType == undefined && methodLowerCase !== 'get' && methodLowerCase !== 'head') {\n\t\tcontentType = $defaultContentType;\n\t}\n\t\n\t// tslint:disable-next-line\n\tif (responseType == undefined) {\n\t\tresponseType = $defaultResponseType;\n\t}\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\n\treturn client[methodLowerCase]({\n\t\turl,\n\t\tname: this.name,\n\t\thandleError,\n\t\tmeta,\n\t\tcontentType,\n\t\tresponseType,\n\t\tbody,\n\t\theaders,\n\t\tquery\n\t});\n}\n\nfunction createAPI<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase>(\n\tinfo: ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>\n): APIzRequest<RawRequestOptions, ContentType, ResponseType, Meta> {\n\tconst fn = request.bind<Request<RawRequestOptions, ContentType, ResponseType, Meta, Method>>(info);\n\n\t['url', 'method', 'meta', 'type'].forEach((k: string) => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn (fn as unknown) as APIzRequest<RawRequestOptions, ContentType, ResponseType, Meta>;\n}\n\nexport function APIz<\nRawRequestOptions = any,\nContentType = any,\nResponseType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase,\nT extends Record<string, APIInfo<ContentType, ResponseType, Meta>> = Record<string, APIInfo<ContentType, ResponseType, Meta>>\n>(\n\tgroup: APIGroup<T>,\n\toptions?: APIzOptions<RawRequestOptions, ContentType, ResponseType, Meta, Method>\n): APIzInstance<RawRequestOptions, T, Method> {\n\tlet baseURL: string | undefined,\n\t\timmutable: boolean | undefined,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString | undefined,\n\t\tclient: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method> | undefined,\n\t\tapiInfoGroup = {} as Record<\n\t\t\tstring,\n\t\t\tParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method> | APIInfo<ContentType, ResponseType, Meta>\n\t\t>;\n\n\tisStr(group.baseURL) && (baseURL = group.baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\timmutable = globalIsArgsImmutable,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring,\n\t\tclient = globalClient\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tconst apis = group.apis;\n\n\tif (immutable) {\n\t\tapiInfoGroup = apis || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apis) {\n\t\t\t// tslint:disable-next-line\n\t\t\tif (isObj(apis[key])) {\n\t\t\t\tapiInfoGroup[key] = parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>(\n\t\t\t\t\tkey,\n\t\t\t\t\tapis[key],\n\t\t\t\t\tgroupOptions\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy(\n\t\t{},\n\t\t{\n\t\t\tget(target: object, key: string, receiver: APIzInstance<RawRequestOptions, T, Method>): any {\n\t\t\t\tif (!apiInfoGroup[key] || !isEnumerable(apiInfoGroup, key)) {\n\t\t\t\t\treturn Reflect.get(target, key);\n\t\t\t\t} else if (\n\t\t\t\t\t!(apiInfoGroup[key] as ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>).init\n\t\t\t\t) {\n\t\t\t\t\tapiInfoGroup[key] = parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tapiInfoGroup[key],\n\t\t\t\t\t\tgroupOptions\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst apiFn = createAPI(apiInfoGroup[key] as ParsedAPIInfo<\n\t\t\t\t\tRawRequestOptions,\n\t\t\t\t\tContentType,\n\t\t\t\t\tResponseType,\n\t\t\t\t\tMeta,\n\t\t\t\t\tMethod\n\t\t\t\t>);\n\t\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\t\treturn apiFn;\n\t\t\t},\n\t\t\tgetPrototypeOf(): object {\n\t\t\t\treturn APIz.prototype;\n\t\t\t}\n\t\t}\n\t);\n\n\tconst self = Object.create(pxy) as APIzInstance<RawRequestOptions, T, Method>;\n\n\tself.remove = function (name: string): APIzInstance<RawRequestOptions, T, Method> {\n\t\tthis[name] && ((apiInfoGroup[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\n\tself.add = function (\n\t\tname: string,\n\t\tapiInfo: APIInfo<ContentType, ResponseType, Meta>\n\t): APIzInstance<RawRequestOptions, T, Method> {\n\t\tif (apiInfoGroup[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tapiInfoGroup[name] = parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>(\n\t\t\tname,\n\t\t\tapiInfo,\n\t\t\tgroupOptions\n\t\t);\n\t\t// 同前面一样存在运行时类型转换\n\t\t(this as any)[name] = createAPI(apiInfoGroup[name] as ParsedAPIInfo<\n\t\t\tRawRequestOptions,\n\t\t\tContentType,\n\t\t\tResponseType,\n\t\t\tMeta,\n\t\t\tMethod\n\t\t>);\n\t\treturn this;\n\t};\n\n\treturn self;\n}\n\nexport function config<\nRawRequestOptions,\nContentType = any,\nResponseType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n>(\n\t{\n\t\tquerystring,\n\t\tparamRegex,\n\t\timmutable,\n\t\tclient,\n\t\treset,\n\t\tdefaultContentType: dct,\n\t\tdefaultResponseType: drt\n\t}: GlobalAPIzOptions<RawRequestOptions, ContentType, ResponseType, Meta, Method> = {reset: true}\n): void {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalIsArgsImmutable = immutable;\n\tglobalClient = client;\n\tdefaultContentType = dct;\n\tdefaultResponseType = drt;\n\treset &&\n\t\t((globalQuerystring = globalParamRegex = globalClient = defaultContentType = defaultResponseType = undefined),\n\t\t(globalIsArgsImmutable = false));\n}","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj: any): string {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\t(k: string) =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v == null ? '' : v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k] == null ? '' : obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n};","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultContentType: 'json',\n\tdefaultResponseType: 'json'\n});\n\nexport * from './core';"],"names":["toString","Map","call","bind","Object","prototype","isStr","s","isFn","f","isObj","o","isEnumerable","propertyIsEnumerable","globalQuerystring","globalParamRegex","globalIsArgsImmutable","globalClient","defaultContentType","defaultResponseType","defaultParamRegex","slashRegex","replaceSlash","m","isAPIInfoWithURL","v","url","parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","method","contentType","responseType","meta","path","Error","info","bURL","TypeError","JSON","stringify","replace","methodUpperCase","toUpperCase","methodLowerCase","toLowerCase","includes","parts","split","offset","test","slice","join","regex","init","replaceParams","params","encodeURIComponent","request","options","isRawOption","$defaultContentType","$defaultResponseType","qs","query","body","headers","handleError","undefined","createAPI","fn","forEach","k","defineProperty","value","enumerable","writable","APIz","group","immutable","apiInfoGroup","groupOptions","apis","key","console","warn","pxy","Proxy","get","target","receiver","Reflect","apiFn","set","getPrototypeOf","self","create","remove","add","apiInfo","config","reset","dct","drt","RegExp","obj","keys","map","Array","isArray"],"mappings":"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"}