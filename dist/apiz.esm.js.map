{"version":3,"file":"apiz.esm.js","sources":["../src/core.ts","../src/querystring.ts","../src/index.ts"],"sourcesContent":["/* global DEBUG */\nimport { Omit } from 'type-fest';\n\nexport type HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\ntype HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ntype Callable = (...args: Array<any>) => any;\n\n// from https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ninterface KVObject {\n\t[k: string]: any;\n}\n\nexport type Serialize2QueryString = (obj: any) => string;\n\ninterface APIMetaInfoWithURL<T extends string, M> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: T;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: M;\n}\n\ninterface APIMetaInfoWithPath<T extends string, M> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: T;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: M;\n}\n\nexport type APIMetaInfo<T extends string, M> = APIMetaInfoWithURL<T, M> | APIMetaInfoWithPath<T, M>;\n\ninterface APIMetaWithoutBaseURL<T extends string, M> {\n\t[key: string]: APIMetaInfo<T, M>;\n}\n\ninterface APIMetaWithBaseURL {\n\t_baseURL?: string;\n}\n\n// 为什么不把这两个放一个接口, 放一个接口的话, 索引类型还需要联合undefined和string\n// 然而对于APIMetaInfo, 是不允许undefined和string, 所以拆两个接口用&\nexport type APIMeta<T extends string, M> = APIMetaWithBaseURL & Omit<APIMetaWithoutBaseURL<T, M>, '_baseURL'>;\n\nexport interface ClientRequestOptions<T extends string, M, O> {\n\turl: string;\n\tname: string;\n\tmeta?: M;\n\toptions?: O;\n\ttype?: T;\n\tbody?: any;\n}\n\nexport type APIzClient<T extends string, M, O, H extends HTTPMethodLowerCase> = {\n\t[K in H]?: (options: ClientRequestOptions<T, M, O>) => Promise<any>;\n}\n\nexport interface GlobalOptions<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>> {\n\tclient?: C;\n\tparamRegex?: RegExp;\n\tdefaultType?: string;\n\timmutableMeta?: boolean;\n\treset?: boolean;\n\tquerystring?(obj: object): string;\n}\n\nexport interface APIzOptions<C> {\n\tbaseURL?: string;\n\tclient?: C;\n\timmutableMeta?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\ninterface ParsedAPIMetaInfo<T extends string, M, O> extends APIzClient<T, M, O, HTTPMethodLowerCase> {\n\turl: string;\n\tbaseURL: string;\n\tpath: string;\n\tname: string;\n\tmeta?: M;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: HTTPMethodLowerCase;\n\ttype: T;\n\tpathParams: boolean;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n};\n\nexport interface APIzRequest<T, M, O> {\n\t// with body\n\t(body: any, params: KVObject, query: KVObject | string, type: T): Promise<any>;\n\t(body?: any, params?: KVObject, query?: KVObject | string): Promise<any>;\n\t(body: any, params: KVObject | string, type: T): Promise<any>;\n\t// (body: any, params: KVObject): Promise<any>;\n\t// (body: any, query: KVObject | string, type: T): Promise<any>;\n\t(body: any, query: KVObject | string): Promise<any>;\n\t(body: any, type: T): Promise<any>;\n\t// (body: any): Promise<any>;\n\t// without body\n\t(params: KVObject, query?: KVObject | string): Promise<any>;\n\t// (params: KVObject): Promise<any>;\n\t(query: KVObject | string): Promise<any>;\n\t// (): Promise<any>;\n\t(clientOptions: O, optionsFlag: boolean): Promise<any>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: M;\n\treadonly type: T;\n\treadonly pathParams: boolean;\n}\n\n\ntype ProxyMeta<T extends string, M, O, N extends APIMeta<T, M>> = {\n\t[K in keyof N]: APIzRequest<T, M, O>;\n}\n\ninterface APIzMethod<T extends string, M> {\n\tadd: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n\tremove: (name: string) => this;\n}\n\nexport type APIzInstance<T extends string, M, O, N extends APIMeta<T, M>> =  APIzMethod<T, M> & Omit<ProxyMeta<T, M, O, N>, 'add' | 'remove'>;\n\n\nconst toString = (Map as unknown as () => any).call.bind(Object.prototype.toString);\nconst isObj = (o: any): boolean => toString(o) === '[object Object]';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isEnumerable = (Map as unknown as () => any).call.bind(Object.prototype.propertyIsEnumerable);\n\nlet defaultType: string | undefined,\n\tglobalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\t// 这东西有没有, 是什么类型, 应该只能在运行时才能确定了, 或者分析控制流?\n\t// 那就随便写个类型吧...等到使用处as一下好了\n\tglobalClient: APIzClient<any, any, any, HTTPMethodLowerCase> | undefined,\n\tglobalImmutableMeta: boolean | undefined = false;\n\n// ES2018+, 是讲这个特性没法被babel转译,\n// 那既然都用ES2018了, 不如把能用的特性都用上好了...\nconst defaultParamRegex = /:((\\w|-)+)/g,\n\tslashRegex = /\\/\\//g,\n\tmethodMap = {\n\t\tget: noBodyRequest,\n\t\thead: noBodyRequest,\n\t\tpost: bodyRequest,\n\t\tput: bodyRequest,\n\t\tpatch: bodyRequest,\n\t\t// 尽管浏览器支持OPTIONS和DELETE带body, 但是考虑到不常用,\n\t\t// 还是默认它们不带body, 如果需要的话, 可以直接开启完整选项加入body\n\t\t// 有空改成可配置吧\n\t\toptions: noBodyRequest,\n\t\tdelete: noBodyRequest\n\t},\n\treplaceSlash = (m: string, o: number): string => o <= 6 ? m : '/';\n\n\nfunction parseApiInfo<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>>(\n\tname: string,\n\trawInfo: UnionToIntersection<APIMetaInfo<T, M>>,\n\t{ baseURL: gBaseURL, paramRegex, querystring, client }: {\n\t\tbaseURL?: string;\n\t\tparamRegex: RegExp;\n\t\tquerystring: Serialize2QueryString;\n\t\tclient: C;\n\t}\n): ParsedAPIMetaInfo<T, M, O> | never {\n\t// tslint:disable-next-line\n\tlet { url, baseURL, path, meta, method = 'GET' as HTTPMethodUpperCase, type = defaultType as T, pathParams = false } = rawInfo;\n\tconst info = {} as ParsedAPIMetaInfo<T, M, O>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, replaceSlash);\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tmethod = method.toUpperCase() as HTTPMethodUpperCase;\n\tconst methodLowerCase = method.toLowerCase() as HTTPMethodLowerCase;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(method)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${method}.`);\n\t}\n\tif (!isFn((client as any)[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tconst parts = info.url.split(/\\/(?=\\w|:)/g), offset = /^(https?:|\\/)/.test(parts[0]) ? 2 : 1;\n\tinfo.baseURL = parts.slice(0, offset).join('/');\n\tinfo.path = `/${parts.slice(offset).join('/')}`;\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = method;\n\tinfo.methodLowerCase = methodLowerCase;\n\tinfo[methodLowerCase] = client[methodLowerCase];\n\tinfo.type = type;\n\tinfo.pathParams = pathParams;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: KVObject): (m: string, v: string) => string | never {\n\treturn (m: string, v: string): string | never => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\n\n// 其实noBodyRequest和bodyRequest我们可以合并成一个,\n// 因为我们已经知道method了, 也就可以知道它是否会带body,\n// 但是考虑到让代码更加清晰一点, 还是拆成两个吧, 这点\n// 代码重复算是可以接受. 另一方面讲, 其实也可以让接口只\n// 实现一个request方法就好, 而不用对每个HTTP方法都实现一个\n// 对应的方法, 因为我们也可以把method传过去\nfunction noBodyRequest<T extends string, M, O>(this: ParsedAPIMetaInfo<T, M, O>, ...args: Array<any>): Promise<any> | never {\n\tconst { methodLowerCase, pathParams, regex, querystring, baseURL, path } = this;\n\tlet params, query, qs, url = this.url;\n\tif (args[1] === true) {\n\t\t// 接口处记得检测对象是否为空\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[0];\n\t\tquery = args[1];\n\t} else {\n\t\tquery = args[0];\n\t}\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction bodyRequest<T extends string, M, O>(this: ParsedAPIMetaInfo<T, M, O>, ...args: Array<any>): Promise<any> | never {\n\t// $以区分全局变量\n\tconst { methodLowerCase, type: $defaultType, pathParams, regex, querystring, baseURL, path } = this;\n\tlet params, query, body, type, qs, url = this.url;\n\tif (args[1] === true) {\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\ttype,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[1];\n\t\tquery = args[2];\n\t\ttype = args[3] || $defaultType;\n\t} else {\n\t\tquery = args[1];\n\t\ttype = args[2] || $defaultType;\n\t}\n\tbody = args[0];\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\t// 这里实际上会造成带body的query的集合和不带body的query的集合不一致,\n\t// 不过考虑实际情况这样的不一致也是可以接受\n\tif (isStr(query) && !query.includes('=')) {\n\t\ttype = query;\n\t} else if (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\ttype,\n\t\tbody,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction createAPI<T extends string, M, O>(info: ParsedAPIMetaInfo<T, M, O>): APIzRequest<T, M, O> | never {\n\t// const fn = methodMap[info.method]\n\tconst f = (methodMap as unknown as ParsedAPIMetaInfo<T, M, O>)[info.methodLowerCase];\n\tif (!f) {\n\t\tthrow new Error(`APIzClient must implement ${info.methodLowerCase} method.`);\n\t}\n\tconst fn = f.bind(info);\n\n\t['url', 'method', 'meta', 'type', 'pathParams'].forEach((k: string) => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn fn as APIzRequest<T, M, O>;\n}\n\n\n\n\n// 理想情况下是这样的\n// class APIz<T, M, N extends APIMeta<T, M>> {\n// \tpublic add: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n// \tpublic remove: (name: string) => this;\n// \t[K in key of N]: object;\n// \tconstructor(apiMeta: N, options: APIzOptions<>) {\n\t\t\n// \t}\n// }\n\n// type ProxyMeta<T, M, N extends APIMeta<T, M>> = {\n// \t[K in keyof N]: object;\n// };\n\n// TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithBody<T extends string> = ((body: any, params: KVObject, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, params: KVObject, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject) => Promise<any>)\n// \t| ((body: any, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, type: T) => Promise<any>)\n// \t| ((body: any) => Promise<any>);\n\n// // TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithoutBody = ((params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((params: KVObject) => Promise<any>)\n// \t| ((query: KVObject | string) => Promise<any>)\n// \t| (() => Promise<any>);\n\n\n\n\n\n// type APIzConstructor<C, T extends string, M, N extends APIMeta<T, M>> =\tnew (apiMeta: N, options: APIzOptions<C>) => APIzInstance<T, M, N>;\n// class不知道怎么实现mapped types, 用function又没办法直接\n// 实现上面的constructor接口, 只能是让ts中不允许new调用, js中运行new调用了\n// 其实也没什么影响, 除了看上去不那么面向对象少个new\n// 另外泛型参数过多有什么好的解决办法?\nfunction APIz<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>, N extends APIMeta<T, M>>(apiMeta: N, options?: APIzOptions<C>): APIzInstance<T, M, O, N> | never {\n\tlet baseURL: string | undefined,\n\t\timmutableMeta: boolean,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString,\n\t\tclient: C,\n\t\tmeta = {} as APIMeta<T, M>;\n\n\tisStr(apiMeta._baseURL) && (baseURL = apiMeta._baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\t// 这里undefined没什么影响, 视为boolean没问题\n\t\timmutableMeta = globalImmutableMeta as boolean,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring as Serialize2QueryString,\n\t\tclient = globalClient as C\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tif (immutableMeta) {\n\t\tmeta = apiMeta || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apiMeta) {\n\t\t\tif (isObj(apiMeta[key])) {\n\t\t\t\tmeta[key] = parseApiInfo<T, M, O, C>(key, apiMeta[key as keyof APIMeta<T, M>] as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t\t} else if (key !== '_baseURL') {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy({}, {\n\t\tget(target: object, key: string | symbol, receiver: APIzInstance<T, M, O, N>): any {\n\t\t\tif (!meta[key as string] || !isEnumerable(meta, key)) {\n\t\t\t\treturn Reflect.get(target, key);\n\t\t\t} else if (!(meta[key as string] as ParsedAPIMetaInfo<T, M, O>).init) {\n\t\t\t\tmeta[key as string] = parseApiInfo<T, M, O, C>(key as string, meta[key as string] as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t\t}\n\t\t\t// 到这里有个meta[key]在运行时从APIMetaInfo到ParsedAPIMetaInfo的类型转换\n\t\t\t// 只能是强行as了\n\t\t\tconst apiFn = createAPI(meta[key as string] as ParsedAPIMetaInfo<T, M, O>);\n\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\treturn apiFn;\n\t\t},\n\t\tgetPrototypeOf(): object {\n\t\t\treturn APIz.prototype;\n\t\t}\n\t});\n\n\tconst self = Object.create(pxy) as APIzInstance<T, M, O, N>;\n\tself.remove = function (name: string): APIzInstance<T, M, O, N> {\n\t\tthis[name] && ((meta[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\tself.add = function (name: string, apiInfo: APIMetaInfo<T, M>): APIzInstance<T, M, O, N> {\n\t\tif (meta[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tmeta[name] = parseApiInfo<T, M, O, C>(name, apiInfo as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t// 同前面一样存在运行时类型转换\n\t\tthis[name] = createAPI(meta[name] as ParsedAPIMetaInfo<T, M, O>);\n\t\treturn this;\n\t};\n\treturn self;\n}\n\nexport { APIz };\n\nexport function config<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>>(\n\t{\n\t\tquerystring, paramRegex, immutableMeta, client, reset, defaultType: dt\n\t}: GlobalOptions<T, M, O, C> = { reset: true }\n): void {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalImmutableMeta = immutableMeta;\n\tglobalClient = client;\n\tdefaultType = dt;\n\treset && (globalQuerystring = globalParamRegex = globalClient = defaultType = undefined, globalImmutableMeta = false);\n}\n","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj: any): string {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\t(k: string) =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n}","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultType: 'json'\n});\n\nexport * from './core';"],"names":["toString","Map","call","bind","Object","prototype","isObj","o","isFn","f","isStr","s","isEnumerable","propertyIsEnumerable","defaultType","globalQuerystring","globalParamRegex","globalClient","globalImmutableMeta","defaultParamRegex","slashRegex","methodMap","get","noBodyRequest","head","post","bodyRequest","put","patch","options","delete","replaceSlash","m","parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","url","path","meta","method","type","pathParams","info","bURL","Error","TypeError","JSON","stringify","replace","toUpperCase","methodLowerCase","toLowerCase","includes","parts","split","offset","test","slice","join","regex","init","replaceParams","params","v","encodeURIComponent","args","query","qs","$defaultType","body","createAPI","fn","forEach","k","defineProperty","value","enumerable","writable","APIz","apiMeta","immutableMeta","_baseURL","groupOptions","key","console","warn","pxy","Proxy","target","receiver","Reflect","apiFn","set","getPrototypeOf","self","create","remove","undefined","add","apiInfo","config","reset","dt","RegExp","obj","keys","map","Array","isArray"],"mappings":"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"}