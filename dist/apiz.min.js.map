{"version":3,"file":"apiz.min.js","sources":["../../src/core.ts","apiz.js","../../src/querystring.ts"],"sourcesContent":["/* global DEBUG */\nimport { Omit } from 'type-fest';\n\ntype HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\ntype HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ntype Callable = (...args: Array<any>) => any;\n\n// from https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ninterface KVObject {\n\t[k: string]: any;\n}\n\nexport type Serialize2QueryString = (obj: any) => string;\n\ninterface APIMetaInfoWithURL<T extends string, M> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: T;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: M;\n}\n\ninterface APIMetaInfoWithPath<T extends string, M> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: T;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: M;\n}\n\nexport type APIMetaInfo<T extends string, M> = APIMetaInfoWithURL<T, M> | APIMetaInfoWithPath<T, M>;\n\ninterface APIMetaWithoutBaseURL<T extends string, M> {\n\t[key: string]: APIMetaInfo<T, M>;\n}\n\ninterface APIMetaWithBaseURL {\n\t_baseURL?: string;\n}\n\n// 为什么不把这两个放一个接口, 放一个接口的话, 索引类型还需要联合undefined和string\n// 然而对于APIMetaInfo, 是不允许undefined和string, 所以拆两个接口用&\nexport type APIMeta<T extends string, M> = APIMetaWithBaseURL & Omit<APIMetaWithoutBaseURL<T, M>, '_baseURL'>;\n\nexport interface ClientRequestOptions<T extends string, M, O> {\n\turl: string;\n\tname: string;\n\tmeta?: M;\n\toptions?: O;\n\ttype?: T;\n\tbody?: any;\n}\n\nexport type APIzClient<T extends string, M, O, H extends HTTPMethodLowerCase> = {\n\t[K in H]?: (options: ClientRequestOptions<T, M, O>) => Promise<any>;\n}\n\nexport interface GlobalOptions<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>> {\n\tclient?: C;\n\tparamRegex?: RegExp;\n\tdefaultType?: string;\n\timmutableMeta?: boolean;\n\treset?: boolean;\n\tquerystring?(obj: object): string;\n}\n\nexport interface APIzOptions<C> {\n\tbaseURL?: string;\n\tclient?: C;\n\timmutableMeta?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\ninterface ParsedAPIMetaInfo<T extends string, M, O> extends APIzClient<T, M, O, HTTPMethodLowerCase> {\n\turl: string;\n\tbaseURL: string;\n\tpath: string;\n\tname: string;\n\tmeta?: M;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: HTTPMethodLowerCase;\n\ttype: T;\n\tpathParams: boolean;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n};\n\nexport interface APIzRequest<T, M, O> {\n\t// with body\n\t(body: any, params: KVObject, query: KVObject | string, type: T): Promise<any>;\n\t(body?: any, params?: KVObject, query?: KVObject | string): Promise<any>;\n\t(body: any, params: KVObject | string, type: T): Promise<any>;\n\t// (body: any, params: KVObject): Promise<any>;\n\t// (body: any, query: KVObject | string, type: T): Promise<any>;\n\t(body: any, query: KVObject | string): Promise<any>;\n\t(body: any, type: T): Promise<any>;\n\t// (body: any): Promise<any>;\n\t// without body\n\t(params: KVObject, query?: KVObject | string): Promise<any>;\n\t// (params: KVObject): Promise<any>;\n\t(query: KVObject | string): Promise<any>;\n\t// (): Promise<any>;\n\t(clientOptions: O, optionsFlag: boolean): Promise<any>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: M;\n\treadonly type: T;\n\treadonly pathParams: boolean;\n}\n\n\ntype ProxyMeta<T extends string, M, O, N extends APIMeta<T, M>> = {\n\t[K in keyof N]: APIzRequest<T, M, O>;\n}\n\ninterface APIzMethod<T extends string, M> {\n\tadd: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n\tremove: (name: string) => this;\n}\n\nexport type APIzInstance<T extends string, M, O, N extends APIMeta<T, M>> =  APIzMethod<T, M> & Omit<ProxyMeta<T, M, O, N>, 'add' | 'remove'>;\n\n\nconst toString = (Map as unknown as () => any).call.bind(Object.prototype.toString);\nconst isObj = (o: any) => toString(o) === '[object Object]';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isEnumerable = (Map as unknown as () => any).call.bind(Object.prototype.propertyIsEnumerable);\n\nlet defaultType: string | undefined,\n\tglobalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\t// 这东西有没有, 是什么类型, 应该只能在运行时才能确定了, 或者分析控制流?\n\t// 那就随便写个类型吧...等到使用处as一下好了\n\tglobalClient: APIzClient<any, any, any, HTTPMethodLowerCase> | undefined,\n\tglobalImmutableMeta: boolean | undefined = false;\n\n// ES2018+, 是讲这个特性没法被babel转译,\n// 那既然都用ES2018了, 不如把能用的特性都用上好了...\nconst defaultParamRegex = /(?<=\\/):((\\w|-)+)/g,\n\tslashRegex = /(?<!:)(\\/\\/)/g,\n\tmethodMap = {\n\t\tget: noBodyRequest,\n\t\thead: noBodyRequest,\n\t\tpost: bodyRequest,\n\t\tput: bodyRequest,\n\t\tpatch: bodyRequest,\n\t\t// 尽管浏览器支持OPTIONS和DELETE带body, 但是考虑到不常用,\n\t\t// 还是默认它们不带body, 如果需要的话, 可以直接开启完整选项加入body\n\t\t// 有空改成可配置吧\n\t\toptions: noBodyRequest,\n\t\tdelete: noBodyRequest\n\t};\n\n\nfunction parseApiInfo<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>>(\n\tname: string,\n\trawInfo: UnionToIntersection<APIMetaInfo<T, M>>,\n\t{ baseURL: gBaseURL, paramRegex, querystring, client }: {\n\t\tbaseURL?: string;\n\t\tparamRegex: RegExp;\n\t\tquerystring: Serialize2QueryString;\n\t\tclient: C\n\t}\n): ParsedAPIMetaInfo<T, M, O> | never {\n\t// tslint:disable-next-line\n\tlet { url, baseURL, path, meta, method = 'GET' as HTTPMethodUpperCase, type = defaultType as T, pathParams = false } = rawInfo;\n\tconst info = {} as ParsedAPIMetaInfo<T, M, O>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, '/');\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tmethod = method.toUpperCase() as HTTPMethodUpperCase;\n\tconst methodLowerCase = method.toLowerCase() as HTTPMethodLowerCase;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(method)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${method}.`);\n\t}\n\tif (!isFn((client as any)[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = method;\n\tinfo.methodLowerCase = methodLowerCase;\n\tinfo[methodLowerCase] = client[methodLowerCase];\n\tinfo.type = type;\n\tinfo.pathParams = pathParams;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: KVObject): (m: string, v: string) => string | never {\n\treturn (m: string, v: string) => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\n\n// 其实noBodyRequest和bodyRequest我们可以合并成一个,\n// 因为我们已经知道method了, 也就可以知道它是否会带body,\n// 但是考虑到让代码更加清晰一点, 还是拆成两个吧, 这点\n// 代码重复算是可以接受. 另一方面讲, 其实也可以让接口只\n// 实现一个request方法就好, 而不用对每个HTTP方法都实现一个\n// 对应的方法, 因为我们也可以把method传过去\nfunction noBodyRequest<T extends string, M, O>(this: ParsedAPIMetaInfo<T, M, O>, ...args: Array<any>): Promise<any> | never {\n\tconst { methodLowerCase, pathParams, regex, querystring } = this;\n\tlet params, query, qs, url = this.url;\n\tif (args[1] === true) {\n\t\t// 接口处记得检测对象是否为空\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[0];\n\t\tquery = args[1];\n\t} else {\n\t\tquery = args[0];\n\t}\n\n\tif (params) {\n\t\turl = url.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction bodyRequest<T extends string, M, O>(this: ParsedAPIMetaInfo<T, M, O>, ...args: Array<any>): Promise<any> | never {\n\t// $以区分全局变量\n\tconst { methodLowerCase, type: $defaultType, pathParams, regex, querystring } = this;\n\tlet params, query, body, type, qs, url = this.url;\n\tif (args[1] === true) {\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\ttype,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[1];\n\t\tquery = args[2];\n\t\ttype = args[3] || $defaultType;\n\t} else {\n\t\tquery = args[1];\n\t\ttype = args[2] || $defaultType;\n\t}\n\tbody = args[0];\n\n\tif (params) {\n\t\turl = url.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\t// 这里实际上会造成带body的query的集合和不带body的query的集合不一致,\n\t// 不过考虑实际情况这样的不一致也是可以接受\n\tif (isStr(query) && !query.includes('=')) {\n\t\ttype = query;\n\t} else if (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\ttype,\n\t\tbody,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction createAPI<T extends string, M, O>(info: ParsedAPIMetaInfo<T, M, O>): APIzRequest<T, M, O> | never {\n\t// const fn = methodMap[info.method]\n\tconst f = (methodMap as unknown as ParsedAPIMetaInfo<T, M, O>)[info.methodLowerCase];\n\tif (!f) {\n\t\tthrow new Error(`APIzClient must implement ${info.methodLowerCase} method.`);\n\t}\n\tconst fn = f.bind(info);\n\n\t['url', 'method', 'meta', 'type', 'pathParams'].forEach(k => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn fn as APIzRequest<T, M, O>;\n}\n\n\n\n\n// 理想情况下是这样的\n// class APIz<T, M, N extends APIMeta<T, M>> {\n// \tpublic add: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n// \tpublic remove: (name: string) => this;\n// \t[K in key of N]: object;\n// \tconstructor(apiMeta: N, options: APIzOptions<>) {\n\t\t\n// \t}\n// }\n\n// type ProxyMeta<T, M, N extends APIMeta<T, M>> = {\n// \t[K in keyof N]: object;\n// };\n\n// TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithBody<T extends string> = ((body: any, params: KVObject, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, params: KVObject, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject) => Promise<any>)\n// \t| ((body: any, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, type: T) => Promise<any>)\n// \t| ((body: any) => Promise<any>);\n\n// // TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithoutBody = ((params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((params: KVObject) => Promise<any>)\n// \t| ((query: KVObject | string) => Promise<any>)\n// \t| (() => Promise<any>);\n\n\n\n\n\n// type APIzConstructor<C, T extends string, M, N extends APIMeta<T, M>> =\tnew (apiMeta: N, options: APIzOptions<C>) => APIzInstance<T, M, N>;\n// class不知道怎么实现mapped types, 用function又没办法直接\n// 实现上面的constructor接口, 只能是让ts中不允许new调用, js中运行new调用了\n// 其实也没什么影响, 除了看上去不那么面向对象少个new\n// 另外泛型参数过多有什么好的解决办法?\nfunction APIz<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>, N extends APIMeta<T, M>>(apiMeta: N, options?: APIzOptions<C>): APIzInstance<T, M, O, N> | never {\n\tlet baseURL: string | undefined,\n\t\timmutableMeta: boolean,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString,\n\t\tclient: C,\n\t\tmeta = {} as APIMeta<T, M>;\n\n\tisStr(apiMeta._baseURL) && (baseURL = apiMeta._baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\t// 这里undefined没什么影响, 视为boolean没问题\n\t\timmutableMeta = globalImmutableMeta as boolean,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring as Serialize2QueryString,\n\t\tclient = globalClient as C\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tif (immutableMeta) {\n\t\tmeta = apiMeta || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apiMeta) {\n\t\t\tif (isObj(apiMeta[key])) {\n\t\t\t\tmeta[key] = parseApiInfo<T, M, O, C>(key, apiMeta[key as keyof APIMeta<T, M>] as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t\t} else if (key !== '_baseURL') {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy({}, {\n\t\tget(target, key, receiver) {\n\t\t\tif (!meta[key as string] || !isEnumerable(meta, key)) {\n\t\t\t\treturn Reflect.get(target, key);\n\t\t\t} else if (!(meta[key as string] as ParsedAPIMetaInfo<T, M, O>).init) {\n\t\t\t\tmeta[key as string] = parseApiInfo<T, M, O, C>(key as string, meta[key as string] as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t\t}\n\t\t\t// 到这里有个meta[key]在运行时从APIMetaInfo到ParsedAPIMetaInfo的类型转换\n\t\t\t// 只能是强行as了\n\t\t\tconst apiFn = createAPI(meta[key as string] as ParsedAPIMetaInfo<T, M, O>);\n\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\treturn apiFn;\n\t\t},\n\t\tgetPrototypeOf() {\n\t\t\treturn APIz.prototype;\n\t\t}\n\t});\n\n\tconst self = Object.create(pxy) as APIzInstance<T, M, O, N>;\n\tself.remove = function (name: string): APIzInstance<T, M, O, N> {\n\t\tthis[name] && ((meta[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\tself.add = function (name: string, apiInfo: APIMetaInfo<T, M>): APIzInstance<T, M, O, N> {\n\t\tif (meta[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tmeta[name] = parseApiInfo<T, M, O, C>(name, apiInfo as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t// 同前面一样存在运行时类型转换\n\t\tthis[name] = createAPI(meta[name] as ParsedAPIMetaInfo<T, M, O>);\n\t\treturn this;\n\t};\n\treturn self;\n}\n\nexport { APIz };\n\nexport function config<T extends string, M, O, C extends APIzClient<T, M, O, HTTPMethodLowerCase>>(\n\t{\n\t\tquerystring, paramRegex, immutableMeta, client, reset, defaultType: dt\n\t}: GlobalOptions<T, M, O, C> = { reset: true }\n\t) {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalImmutableMeta = immutableMeta;\n\tglobalClient = client;\n\tdefaultType = dt;\n\treset && (globalQuerystring = globalParamRegex = globalClient = defaultType = undefined, globalImmutableMeta = false);\n}\n","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultType: 'json'\n});\n\nexport * from './core';","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj) {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\tk =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n}"],"names":["parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","url","path","meta","method","type","defaultType","pathParams","info","bURL","Error","isObj","TypeError","JSON","stringify","isStr","replace","slashRegex","toUpperCase","methodLowerCase","toLowerCase","includes","isFn","regex","init","replaceParams","params","m","v","encodeURIComponent","noBodyRequest","args","query","qs","options","bodyRequest","$defaultType","body","createAPI","f","methodMap","fn","bind","forEach","k","Object","defineProperty","value","enumerable","writable","APIz","apiMeta","immutableMeta","_baseURL","globalImmutableMeta","globalParamRegex","defaultParamRegex","globalQuerystring","globalClient","groupOptions","key","console","warn","pxy","Proxy","get","target","receiver","isEnumerable","Reflect","apiFn","set","getPrototypeOf","prototype","self","create","remove","add","apiInfo","config","reset","dt","RegExp","toString","Map","call","o","s","propertyIsEnumerable","head","post","put","patch","delete","obj","keys","map","Array","isArray","join"],"mappings":"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"}