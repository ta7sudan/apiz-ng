{"version":3,"file":"apiz.min.js","sources":["../../src/core.ts","apiz.js","../../src/querystring.ts"],"sourcesContent":["export type HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\nexport type HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ninterface APIInfoWithURL<ContentType, ResponseType, Meta> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\tmeta?: Meta;\n}\n\ninterface APIInfoWithPath<ContentType, ResponseType, Meta> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\tmeta?: Meta;\n}\n\nexport type APIInfo<ContentType = any, ResponseType = any, Meta = any> =\n\t| APIInfoWithURL<ContentType, ResponseType, Meta>\n\t| APIInfoWithPath<ContentType, ResponseType, Meta>;\n\nexport interface APIGroup<\n\tT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>\n> {\n\tbaseURL?: string;\n\tapis: T;\n}\n\nexport interface ClientRequestOptions<RawRequestOptions, ContentType, ResponseType, Meta> {\n\turl: string;\n\tname: string;\n\tmethod: HTTPMethodUpperCase;\n\tmeta?: Meta;\n\toptions?: RawRequestOptions;\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\thandleError?: boolean;\n}\n\nexport type APIzClientRequest<RawRequestOptions, ContentType, ResponseType, Meta> = (\n\toptions: ClientRequestOptions<RawRequestOptions, ContentType, ResponseType, Meta>\n) => Promise<any>;\n\nexport type APIzClient<\nRawRequestOptions,\nContentType,\nResponseType,\nMeta,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = {[k in Method]: APIzClientRequest<RawRequestOptions, ContentType, ResponseType, Meta>};\n\nexport type Serialize2QueryString = (obj: any) => string;\n\nexport interface APIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tResponseType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tbaseURL?: string;\n\tclient?: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n\timmutable?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\nexport interface GlobalAPIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tResponseType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tclient?: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n\tparamRegex?: RegExp;\n\tdefaultContentType?: ContentType;\n\tdefaultResponseType?: ResponseType;\n\timmutable?: boolean;\n\treset?: boolean;\n\tquerystring?: (obj: any) => string;\n}\n\ntype Callable = (...args: Array<any>) => any;\n\ninterface ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase> {\n\turl: string;\n\tbaseURL: string;\n\tpath: string;\n\tname: string;\n\tmeta?: Meta;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: Method;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n\tclient: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n}\n\ntype ContentTypeFrom<R> = R extends Record<string, APIInfo<infer C, infer M>>\n\t? C extends unknown\n\t\t? any\n\t\t: C\n\t: never;\n\ntype ResponseTypeFrom<R> = R extends Record<string, APIInfo<infer C, infer M>>\n\t? M extends unknown\n\t? any\n\t: M\n\t: never;\n\ntype ProxyGroup<RawRequestOptions, T extends Record<string, APIInfo<any, any>>> = {\n\t[k in keyof T]: RequestWithoutThis<RawRequestOptions, ContentTypeFrom<T>, ResponseTypeFrom<T>>\n};\n\nexport type APIzInstance<\nRawRequestOptions = any,\nT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = Omit<ProxyGroup<RawRequestOptions, T>, 'remove' | 'add'> & {\n\tremove: (name: string) => APIzInstance<RawRequestOptions, T, Method>;\n\tadd: (\n\t\tname: string,\n\t\tapiInfo: T extends Record<string, infer I>\n\t\t? I extends APIInfo<infer C, infer M>\n\t\t? APIInfo<C extends unknown ? any : C, M extends unknown ? any : M>\n\t\t: never\n\t\t: never\n\t) => APIzInstance<RawRequestOptions, T, Method>;\n};\n\nexport interface APIzRequestOptions<ContentType, ResponseType> {\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\tcontentType?: ContentType;\n\tresponseType?: ResponseType;\n\thandleError?: boolean;\n}\n\nexport type RequestWithoutThis<RawRequestOptions, ContentType, ResponseType> = (\n\toptions?: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions,\n\tisRawOption?: boolean\n) => Promise<any>;\n\ntype Request<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase> = \n\t((\n\t\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>,\n\t\toptions?: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions,\n\t\tisRawOption?: boolean\n) => Promise<any>);\n\nexport interface APIzRequest<RawRequestOptions, ContentType, ResponseType, Meta> {\n\t(options: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions, isRawOption?: boolean): Promise<\n\t\tany\n\t>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: Meta;\n\treadonly contentType: ContentType;\n\treadonly responseType: ResponseType;\n}\n\nconst toString = ((Map as unknown) as () => any).call.bind(Object.prototype.toString);\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isObj = (o: any): boolean => toString(o) === '[object Object]';\nconst isEnumerable = ((Map as unknown) as () => any).call.bind(\n\tObject.prototype.propertyIsEnumerable\n);\n\nlet globalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\tglobalIsArgsImmutable: boolean | undefined = false,\n\tglobalClient: APIzClient<any, any, any, any, any> | undefined,\n\tdefaultContentType: any,\n\tdefaultResponseType: any;\n\nconst defaultParamRegex = /:((\\w|-)+)/g,\n\tslashRegex = /\\/\\//g,\n\treplaceSlash = (m: string, o: number): string => (o <= 6 ? m : '/');\n\nfunction isAPIInfoWithURL<ContentType, ResponseType, Meta>(v: any): v is APIInfoWithURL<ContentType, ResponseType, Meta> {\n\treturn !!v.url;\n}\n\nfunction parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase>(\n\tname: string,\n\trawInfo: APIInfo<ContentType, ResponseType, Meta>,\n\t{\n\t\tbaseURL: gBaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t}: {\n\tbaseURL?: string;\n\tparamRegex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tclient: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method>;\n\t}\n): ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method> {\n\tconst {\n\t\tmethod = 'GET' as HTTPMethod,\n\t\tcontentType = defaultContentType as ContentType | undefined,\n\t\tresponseType = defaultResponseType as ResponseType | undefined,\n\t\tmeta\n\t} = rawInfo;\n\tlet url: string | undefined, baseURL: string | undefined, path: string | undefined;\n\n\t// 照理讲放parseApiInfo外面显得更合理一点, 不过考虑到add和实例化的时候都要校验\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\n\tif (isAPIInfoWithURL<ContentType, ResponseType, Meta>(rawInfo)) {\n\t\turl = rawInfo.url;\n\t} else {\n\t\tbaseURL = rawInfo.baseURL;\n\t\tpath = rawInfo.path;\n\t}\n\n\tconst info = {} as ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, replaceSlash);\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tconst methodUpperCase = method.toUpperCase() as HTTPMethodUpperCase,\n\t\tmethodLowerCase = method.toLowerCase() as Method;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(methodUpperCase)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${methodUpperCase}.`);\n\t}\n\tif (!isFn(client[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tconst parts = info.url.split(/\\/(?=\\w|:)/g),\n\t\toffset = /^(https?:|\\/)/.test(parts[0]) ? 2 : 1;\n\tinfo.baseURL = parts.slice(0, offset).join('/');\n\tinfo.path = `/${parts.slice(offset).join('/')}`;\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = methodUpperCase;\n\tinfo.methodLowerCase = methodLowerCase;\n\tinfo.client = client;\n\tinfo.contentType = contentType;\n\tinfo.responseType = responseType;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: Record<string, string>): (m: string, v: string) => string | never {\n\treturn (m: string, v: string): string | never => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\nfunction request<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase>(\n\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>,\n\toptions?: APIzRequestOptions<ContentType, ResponseType> | RawRequestOptions,\n\tisRawOption?: boolean\n): Promise<any> {\n\t// $以区分全局变量\n\tconst {\n\t\tmethodLowerCase,\n\t\tcontentType: $defaultContentType,\n\t\tresponseType: $defaultResponseType,\n\t\tregex,\n\t\tquerystring,\n\t\tbaseURL,\n\t\tpath,\n\t\tclient,\n\t\tmeta\n\t} = this;\n\tlet qs,\n\t\t// tslint:disable-next-line\n\t\t{query, params, body, headers, contentType, responseType, handleError} = (options as APIzRequestOptions<ContentType, ResponseType> | undefined) || {} as APIzRequestOptions<ContentType, ResponseType>,\n\t\turl = this.url;\n\n\tif (isRawOption === true) {\n\t\treturn client[methodLowerCase]({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\tmethod: this.method.toUpperCase() as HTTPMethodUpperCase,\n\t\t\thandleError,\n\t\t\toptions: options as RawRequestOptions | undefined\n\t\t});\n\t}\n\n\t// GET, HEAD没有body没有content-type, 如果加上了content-type, 会破坏get默认为简单请求的\n\t// 行为, 从而导致跨域协商\n\t// tslint:disable-next-line\n\tif (contentType == undefined && methodLowerCase !== 'get' && methodLowerCase !== 'head') {\n\t\tcontentType = $defaultContentType;\n\t}\n\t\n\t// tslint:disable-next-line\n\tif (responseType == undefined) {\n\t\tresponseType = $defaultResponseType;\n\t}\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\n\treturn client[methodLowerCase]({\n\t\turl,\n\t\tname: this.name,\n\t\tmethod: this.method.toUpperCase() as HTTPMethodUpperCase,\n\t\thandleError,\n\t\tmeta,\n\t\tcontentType,\n\t\tresponseType,\n\t\tbody,\n\t\theaders,\n\t\tquery\n\t});\n}\n\nfunction createAPI<RawRequestOptions, ContentType, ResponseType, Meta, Method extends HTTPMethodLowerCase>(\n\tinfo: ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>\n): APIzRequest<RawRequestOptions, ContentType, ResponseType, Meta> {\n\tconst fn = request.bind<Request<RawRequestOptions, ContentType, ResponseType, Meta, Method>>(info);\n\n\t['url', 'method', 'meta', 'type'].forEach((k: string) => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn (fn as unknown) as APIzRequest<RawRequestOptions, ContentType, ResponseType, Meta>;\n}\n\nexport function APIz<\nRawRequestOptions = any,\nContentType = any,\nResponseType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase,\nT extends Record<string, APIInfo<ContentType, ResponseType, Meta>> = Record<string, APIInfo<ContentType, ResponseType, Meta>>\n>(\n\tgroup: APIGroup<T>,\n\toptions?: APIzOptions<RawRequestOptions, ContentType, ResponseType, Meta, Method>\n): APIzInstance<RawRequestOptions, T, Method> {\n\tlet baseURL: string | undefined,\n\t\timmutable: boolean | undefined,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString | undefined,\n\t\tclient: APIzClient<RawRequestOptions, ContentType, ResponseType, Meta, Method> | undefined,\n\t\tapiInfoGroup = {} as Record<\n\t\t\tstring,\n\t\t\tParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method> | APIInfo<ContentType, ResponseType, Meta>\n\t\t>;\n\n\tisStr(group.baseURL) && (baseURL = group.baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\timmutable = globalIsArgsImmutable,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring,\n\t\tclient = globalClient\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tconst apis = group.apis;\n\n\tif (immutable) {\n\t\tapiInfoGroup = apis || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apis) {\n\t\t\t// tslint:disable-next-line\n\t\t\tif (isObj(apis[key])) {\n\t\t\t\tapiInfoGroup[key] = parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>(\n\t\t\t\t\tkey,\n\t\t\t\t\tapis[key],\n\t\t\t\t\tgroupOptions\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy(\n\t\t{},\n\t\t{\n\t\t\tget(target: object, key: string, receiver: APIzInstance<RawRequestOptions, T, Method>): any {\n\t\t\t\tif (!apiInfoGroup[key] || !isEnumerable(apiInfoGroup, key)) {\n\t\t\t\t\treturn Reflect.get(target, key);\n\t\t\t\t} else if (\n\t\t\t\t\t!(apiInfoGroup[key] as ParsedAPIInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>).init\n\t\t\t\t) {\n\t\t\t\t\tapiInfoGroup[key] = parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tapiInfoGroup[key],\n\t\t\t\t\t\tgroupOptions\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst apiFn = createAPI(apiInfoGroup[key] as ParsedAPIInfo<\n\t\t\t\t\tRawRequestOptions,\n\t\t\t\t\tContentType,\n\t\t\t\t\tResponseType,\n\t\t\t\t\tMeta,\n\t\t\t\t\tMethod\n\t\t\t\t>);\n\t\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\t\treturn apiFn;\n\t\t\t},\n\t\t\tgetPrototypeOf(): object {\n\t\t\t\treturn APIz.prototype;\n\t\t\t}\n\t\t}\n\t);\n\n\tconst self = Object.create(pxy) as APIzInstance<RawRequestOptions, T, Method>;\n\n\tself.remove = function (name: string): APIzInstance<RawRequestOptions, T, Method> {\n\t\tthis[name] && ((apiInfoGroup[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\n\tself.add = function (\n\t\tname: string,\n\t\tapiInfo: APIInfo<ContentType, ResponseType, Meta>\n\t): APIzInstance<RawRequestOptions, T, Method> {\n\t\tif (apiInfoGroup[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tapiInfoGroup[name] = parseApiInfo<RawRequestOptions, ContentType, ResponseType, Meta, Method>(\n\t\t\tname,\n\t\t\tapiInfo,\n\t\t\tgroupOptions\n\t\t);\n\t\t// 同前面一样存在运行时类型转换\n\t\t(this as any)[name] = createAPI(apiInfoGroup[name] as ParsedAPIInfo<\n\t\t\tRawRequestOptions,\n\t\t\tContentType,\n\t\t\tResponseType,\n\t\t\tMeta,\n\t\t\tMethod\n\t\t>);\n\t\treturn this;\n\t};\n\n\treturn self;\n}\n\nexport function config<\nRawRequestOptions,\nContentType = any,\nResponseType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n>(\n\t{\n\t\tquerystring,\n\t\tparamRegex,\n\t\timmutable,\n\t\tclient,\n\t\treset,\n\t\tdefaultContentType: dct,\n\t\tdefaultResponseType: drt\n\t}: GlobalAPIzOptions<RawRequestOptions, ContentType, ResponseType, Meta, Method> = {reset: true}\n): void {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalIsArgsImmutable = immutable;\n\tglobalClient = client;\n\tdefaultContentType = dct;\n\tdefaultResponseType = drt;\n\treset &&\n\t\t((globalQuerystring = globalParamRegex = globalClient = defaultContentType = defaultResponseType = undefined),\n\t\t(globalIsArgsImmutable = false));\n}","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultContentType: 'json',\n\tdefaultResponseType: 'json'\n});\n\nexport * from './core';","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj: any): string {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\t(k: string) =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v == null ? '' : v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k] == null ? '' : obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n};"],"names":["isAPIInfoWithURL","v","url","parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","method","contentType","defaultContentType","responseType","defaultResponseType","meta","path","Error","info","bURL","isObj","TypeError","JSON","stringify","isStr","replace","slashRegex","replaceSlash","methodUpperCase","toUpperCase","methodLowerCase","toLowerCase","includes","isFn","parts","split","offset","test","slice","join","regex","init","replaceParams","params","m","encodeURIComponent","request","options","isRawOption","$defaultContentType","$defaultResponseType","qs","query","body","headers","handleError","createAPI","fn","bind","forEach","k","Object","defineProperty","value","enumerable","writable","APIz","group","immutable","apiInfoGroup","globalIsArgsImmutable","globalParamRegex","defaultParamRegex","globalQuerystring","globalClient","groupOptions","apis","key","console","warn","pxy","Proxy","get","target","receiver","isEnumerable","Reflect","apiFn","set","getPrototypeOf","prototype","self","create","remove","add","apiInfo","config","reset","dct","drt","RegExp","toString","Map","call","s","f","o","propertyIsEnumerable","obj","keys","map","Array","isArray"],"mappings":"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"}