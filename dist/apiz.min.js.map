{"version":3,"file":"apiz.min.js","sources":["../../src/core.ts","apiz.js","../../src/querystring.ts"],"sourcesContent":["/* global DEBUG */\nimport { Omit } from 'type-fest';\n\ntype HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\ntype HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\ntype HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ntype Callable = (...args: Array<any>) => any;\n\n// from https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ninterface KVObject {\n\t[k: string]: any;\n}\n\nexport type Serialize2QueryString = (obj: any) => string;\n\ninterface APIMetaInfoWithURL<T extends string, M> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: T;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: M;\n}\n\ninterface APIMetaInfoWithPath<T extends string, M> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: T;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: M;\n}\n\nexport type APIMetaInfo<T extends string, M> = APIMetaInfoWithURL<T, M> | APIMetaInfoWithPath<T, M>;\n\ninterface APIMetaWithoutBaseURL<T extends string, M> {\n\t[key: string]: APIMetaInfo<T, M>;\n}\n\ninterface APIMetaWithBaseURL {\n\t_baseURL?: string;\n}\n\n// 为什么不把这两个放一个接口, 放一个接口的话, 索引类型还需要联合undefined和string\n// 然而对于APIMetaInfo, 是不允许undefined和string, 所以拆两个接口用&\nexport type APIMeta<T extends string, M> = APIMetaWithBaseURL & Omit<APIMetaWithoutBaseURL<T, M>, '_baseURL'>;\n\nexport interface ClientRequestOptions<T extends string, M, O> {\n\turl: string;\n\tname: string;\n\tmeta?: M;\n\toptions?: O;\n\ttype?: T;\n\tbody?: any;\n}\n\nexport interface APIzClient<T extends string, M, O> {\n\tget?(options: ClientRequestOptions<T, M, O>): Promise<any>;\n\thead?(options: ClientRequestOptions<T, M, O>): Promise<any>;\n\tdelete?(options: ClientRequestOptions<T, M, O>): Promise<any>;\n\toptions?(options: ClientRequestOptions<T, M, O>): Promise<any>;\n\tpost?(options: ClientRequestOptions<T, M, O>): Promise<any>;\n\tput?(options: ClientRequestOptions<T, M, O>): Promise<any>;\n\tpatch?(options: ClientRequestOptions<T, M, O>): Promise<any>;\n}\n\nexport interface GlobalOptions<T extends string, M, O, C extends APIzClient<T, M, O>> {\n\tclient?: C;\n\tparamRegex?: RegExp;\n\tdefaultType?: string;\n\timmutableMeta?: boolean;\n\treset?: boolean;\n\tquerystring?(obj: object): string;\n}\n\nexport interface APIzOptions<C> {\n\tbaseURL?: string;\n\tclient?: C;\n\timmutableMeta?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\ninterface ParsedAPIMetaInfo<T extends string, M, O> extends APIzClient<T, M, O> {\n\turl: string;\n\tbaseURL: string;\n\tpath: string;\n\tname: string;\n\tmeta?: M;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: HTTPMethodLowerCase;\n\ttype: T;\n\tpathParams: boolean;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n};\n\nexport interface APIzRequest<T, M, O> {\n\t// with body\n\t(body: any, params: KVObject, query: KVObject | string, type: T): Promise<any>;\n\t(body?: any, params?: KVObject, query?: KVObject | string): Promise<any>;\n\t(body: any, params: KVObject | string, type: T): Promise<any>;\n\t// (body: any, params: KVObject): Promise<any>;\n\t// (body: any, query: KVObject | string, type: T): Promise<any>;\n\t(body: any, query: KVObject | string): Promise<any>;\n\t(body: any, type: T): Promise<any>;\n\t// (body: any): Promise<any>;\n\t// without body\n\t(params: KVObject, query?: KVObject | string): Promise<any>;\n\t// (params: KVObject): Promise<any>;\n\t(query: KVObject | string): Promise<any>;\n\t// (): Promise<any>;\n\t(clientOptions: O, optionsFlag: boolean): Promise<any>;\n\turl: string;\n\tmethod: HTTPMethodUpperCase;\n\tmeta: M;\n\ttype: T;\n\tpathParams: boolean;\n}\n\n\ntype ProxyMeta<T extends string, M, O, N extends APIMeta<T, M>> = {\n\t[K in keyof N]: APIzRequest<T, M, O>;\n}\n\ninterface APIzMethod<T extends string, M> {\n\tadd: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n\tremove: (name: string) => this;\n}\n\nexport type APIzInstance<T extends string, M, O, N extends APIMeta<T, M>> =  APIzMethod<T, M> & Omit<ProxyMeta<T, M, O, N>, 'add' | 'remove'>;\n\n\nconst toString = (Map as unknown as () => any).call.bind(Object.prototype.toString);\nconst isObj = (o: any) => toString(o) === '[object Object]';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isEnumerable = (Map as unknown as () => any).call.bind(Object.prototype.propertyIsEnumerable);\n\nlet defaultType: string | undefined,\n\tglobalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\t// 这东西有没有, 是什么类型, 应该只能在运行时才能确定了, 或者分析控制流?\n\t// 那就随便写个类型吧...等到使用处as一下好了\n\tglobalClient: APIzClient<any, any, any> | undefined,\n\tglobalImmutableMeta: boolean | undefined = false;\n\n// ES2018+, 是讲这个特性没法被babel转译,\n// 那既然都用ES2018了, 不如把能用的特性都用上好了...\nconst defaultParamRegex = /:((\\w|-)+)/g,\n\tslashRegex = /\\/\\//g,\n\tmethodMap = {\n\t\tGET: noBodyRequest,\n\t\tHEAD: noBodyRequest,\n\t\tPOST: bodyRequest,\n\t\tPUT: bodyRequest,\n\t\tPATCH: bodyRequest,\n\t\t// 尽管浏览器支持OPTIONS和DELETE带body, 但是考虑到不常用,\n\t\t// 还是默认它们不带body, 如果需要的话, 可以直接开启完整选项加入body\n\t\t// 有空改成可配置吧\n\t\tOPTIONS: noBodyRequest,\n\t\tDELETE: noBodyRequest\n\t},\n\treplaceSlash = (m: string, o: number) => o <= 6 ? m : '/';\n\n\nfunction parseApiInfo<T extends string, M, O, C extends APIzClient<T, M, O>>(\n\tname: string,\n\trawInfo: UnionToIntersection<APIMetaInfo<T, M>>,\n\t{ baseURL: gBaseURL, paramRegex, querystring, client }: {\n\t\tbaseURL?: string;\n\t\tparamRegex: RegExp;\n\t\tquerystring: Serialize2QueryString;\n\t\tclient: C\n\t}\n): ParsedAPIMetaInfo<T, M, O> | never {\n\t// tslint:disable-next-line\n\tlet { url, baseURL, path, meta, method = 'GET' as HTTPMethodUpperCase, type = defaultType as T, pathParams = false } = rawInfo;\n\tconst info = {} as ParsedAPIMetaInfo<T, M, O>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, replaceSlash);\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tmethod = method.toUpperCase() as HTTPMethodUpperCase;\n\tconst methodLowerCase = method.toLowerCase() as HTTPMethodLowerCase;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(method)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${method}.`);\n\t}\n\tif (!isFn((client as any)[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tconst parts = info.url.split(/\\/(?=\\w|:)/g), offset = /^(https?:|\\/)/.test(parts[0]) ? 2 : 1;\n\tinfo.baseURL = parts.slice(0, offset).join('/');\n\tinfo.path = `/${parts.slice(offset).join('/')}`;\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = method;\n\tinfo.methodLowerCase = methodLowerCase;\n\tinfo[methodLowerCase] = client[methodLowerCase];\n\tinfo.type = type;\n\tinfo.pathParams = pathParams;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: KVObject) {\n\treturn (m: string, v: string) => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\n\n// 其实noBodyRequest和bodyRequest我们可以合并成一个,\n// 因为我们已经知道method了, 也就可以知道它是否会带body,\n// 但是考虑到让代码更加清晰一点, 还是拆成两个吧, 这点\n// 代码重复算是可以接受. 另一方面讲, 其实也可以让接口只\n// 实现一个request方法就好, 而不用对每个HTTP方法都实现一个\n// 对应的方法, 因为我们也可以把method传过去\nfunction noBodyRequest<T extends string, M, O>(this: ParsedAPIMetaInfo<T, M, O>, ...args: Array<any>): Promise<any> {\n\tconst { methodLowerCase, pathParams, regex, querystring, baseURL, path } = this;\n\tlet params, query, qs, url = this.url;\n\tif (args[1] === true) {\n\t\t// 接口处记得检测对象是否为空\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[0];\n\t\tquery = args[1];\n\t} else {\n\t\tquery = args[0];\n\t}\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction bodyRequest<T extends string, M, O>(this: ParsedAPIMetaInfo<T, M, O>, ...args: Array<any>): Promise<any> {\n\t// $以区分全局变量\n\tconst { methodLowerCase, type: $defaultType, pathParams, regex, querystring, baseURL, path } = this;\n\tlet params, query, body, type, qs, url = this.url;\n\tif (args[1] === true) {\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\ttype,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[1];\n\t\tquery = args[2];\n\t\ttype = args[3] || $defaultType;\n\t} else {\n\t\tquery = args[1];\n\t\ttype = args[2] || $defaultType;\n\t}\n\tbody = args[0];\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\t// 这里实际上会造成带body的query的集合和不带body的query的集合不一致,\n\t// 不过考虑实际情况这样的不一致也是可以接受\n\tif (isStr(query) && !query.includes('=')) {\n\t\ttype = query;\n\t} else if (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\ttype,\n\t\tbody,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction createAPI<T extends string, M, O>(info: ParsedAPIMetaInfo<T, M, O>): APIzRequest<T, M, O> {\n\t// const fn = methodMap[info.method]\n\tconst fn = methodMap[info.method].bind(info);\n\t['url', 'method', 'meta', 'type', 'pathParams'].forEach(k => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn fn as APIzRequest<T, M, O>;\n}\n\n\n\n\n// 理想情况下是这样的\n// class APIz<T, M, N extends APIMeta<T, M>> {\n// \tpublic add: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n// \tpublic remove: (name: string) => this;\n// \t[K in key of N]: object;\n// \tconstructor(apiMeta: N, options: APIzOptions<>) {\n\t\t\n// \t}\n// }\n\n// type ProxyMeta<T, M, N extends APIMeta<T, M>> = {\n// \t[K in keyof N]: object;\n// };\n\n// TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithBody<T extends string> = ((body: any, params: KVObject, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, params: KVObject, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject) => Promise<any>)\n// \t| ((body: any, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, type: T) => Promise<any>)\n// \t| ((body: any) => Promise<any>);\n\n// // TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithoutBody = ((params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((params: KVObject) => Promise<any>)\n// \t| ((query: KVObject | string) => Promise<any>)\n// \t| (() => Promise<any>);\n\n\n\n\n\n// type APIzConstructor<C, T extends string, M, N extends APIMeta<T, M>> =\tnew (apiMeta: N, options: APIzOptions<C>) => APIzInstance<T, M, N>;\n// class不知道怎么实现mapped types, 用function又没办法直接\n// 实现上面的constructor接口, 只能是让ts中不允许new调用, js中运行new调用了\n// 其实也没什么影响, 除了看上去不那么面向对象少个new\n// 另外泛型参数过多有什么好的解决办法?\nfunction APIz<T extends string, M, O, C extends APIzClient<T, M, O>, N extends APIMeta<T, M>>(apiMeta: N, options?: APIzOptions<C>): APIzInstance<T, M, O, N> {\n\tlet baseURL: string | undefined,\n\t\timmutableMeta: boolean,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString,\n\t\tclient: C,\n\t\tmeta = {} as APIMeta<T, M>;\n\n\tisStr(apiMeta._baseURL) && (baseURL = apiMeta._baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\t// 这里undefined没什么影响, 视为boolean没问题\n\t\timmutableMeta = globalImmutableMeta as boolean,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring as Serialize2QueryString,\n\t\tclient = globalClient as C\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tif (immutableMeta) {\n\t\tmeta = apiMeta || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apiMeta) {\n\t\t\tif (isObj(apiMeta[key])) {\n\t\t\t\tmeta[key] = parseApiInfo(key, apiMeta[key as keyof APIMeta<T, M>] as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t\t} else if (key !== '_baseURL') {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy({}, {\n\t\tget(target, key, receiver) {\n\t\t\tif (!meta[key as string] || !isEnumerable(meta, key)) {\n\t\t\t\treturn Reflect.get(target, key);\n\t\t\t} else if (!(meta[key as string] as ParsedAPIMetaInfo<T, M, O>).init) {\n\t\t\t\tmeta[key as string] = parseApiInfo(key as string, meta[key as string] as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t\t}\n\t\t\t// 到这里有个meta[key]在运行时从APIMetaInfo到ParsedAPIMetaInfo的类型转换\n\t\t\t// 只能是强行as了\n\t\t\tconst apiFn = createAPI(meta[key as string] as ParsedAPIMetaInfo<T, M, O>);\n\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\treturn apiFn;\n\t\t},\n\t\tgetPrototypeOf() {\n\t\t\treturn APIz.prototype;\n\t\t}\n\t});\n\n\tconst self = Object.create(pxy) as APIzInstance<T, M, O, N>;\n\tself.remove = function (name: string): APIzInstance<T, M, O, N> {\n\t\tthis[name] && ((meta[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\tself.add = function (name: string, apiInfo: APIMetaInfo<T, M>): APIzInstance<T, M, O, N> {\n\t\tif (meta[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tmeta[name] = parseApiInfo(name, apiInfo as UnionToIntersection<APIMetaInfo<T, M>>, groupOptions);\n\t\t// 同前面一样存在运行时类型转换\n\t\tthis[name] = createAPI(meta[name] as ParsedAPIMetaInfo<T, M, O>);\n\t\treturn this;\n\t};\n\treturn self;\n}\n\nexport { APIz };\n\nexport function config<T extends string, M, O, C extends APIzClient<T, M, O>>(\n\t{\n\t\tquerystring, paramRegex, immutableMeta, client, reset, defaultType: dt\n\t}: GlobalOptions<T, M, O, C> = { reset: true }\n\t) {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalImmutableMeta = immutableMeta;\n\tglobalClient = client;\n\tdefaultType = dt;\n\treset && (globalQuerystring = globalParamRegex = globalClient = defaultType = undefined, globalImmutableMeta = false);\n}\n","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultType: 'json'\n});\n\nexport * from './core';","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj) {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\tk =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n}"],"names":["parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","url","path","meta","method","type","defaultType","pathParams","info","bURL","Error","isObj","TypeError","JSON","stringify","isStr","replace","slashRegex","replaceSlash","toUpperCase","methodLowerCase","toLowerCase","includes","isFn","parts","split","offset","test","slice","join","regex","init","replaceParams","params","m","v","encodeURIComponent","noBodyRequest","args","query","qs","options","bodyRequest","$defaultType","body","createAPI","fn","methodMap","bind","forEach","k","Object","defineProperty","value","enumerable","writable","APIz","apiMeta","immutableMeta","_baseURL","globalImmutableMeta","globalParamRegex","defaultParamRegex","globalQuerystring","globalClient","groupOptions","key","console","warn","pxy","Proxy","get","target","receiver","isEnumerable","Reflect","apiFn","set","getPrototypeOf","prototype","self","create","remove","add","apiInfo","config","reset","dt","RegExp","toString","Map","call","o","f","s","propertyIsEnumerable","GET","HEAD","POST","PUT","PATCH","OPTIONS","DELETE","obj","keys","map","Array","isArray"],"mappings":"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"}