{"version":3,"file":"apiz.min.js","sources":["../../src/core.ts","apiz.js","../../src/querystring.ts"],"sourcesContent":["/* global DEBUG */\nimport { Omit } from 'type-fest';\n\nexport type HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\ntype HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ntype Callable = (...args: Array<any>) => any;\n\n// from https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ninterface KVObject {\n\t[k: string]: any;\n}\n\nexport type Serialize2QueryString = (obj: any) => string;\n\ninterface APIMetaInfoWithURL<APIzClientType extends string = string, APIzClientMeta = any> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: APIzClientType;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: APIzClientMeta;\n}\n\ninterface APIMetaInfoWithPath<APIzClientType extends string = string, APIzClientMeta = any> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\t// type应当由APIzClient提供, 这里暂定string\n\ttype?: APIzClientType;\n\tpathParams?: boolean;\n\t// meta的类型也应当由APIzClient提供, 这里暂定any\n\tmeta?: APIzClientMeta;\n}\n\nexport type APIMetaInfo<APIzClientType extends string = string, APIzClientMeta = any> = APIMetaInfoWithURL<APIzClientType, APIzClientMeta> | APIMetaInfoWithPath<APIzClientType, APIzClientMeta>;\n\ninterface APIMetaWithoutBaseURL<APIzClientType extends string = string, APIzClientMeta = any> {\n\t[key: string]: APIMetaInfo<APIzClientType, APIzClientMeta>;\n}\n\ninterface APIMetaWithBaseURL {\n\t_baseURL?: string;\n}\n\n// 为什么不把这两个放一个接口, 放一个接口的话, 索引类型还需要联合undefined和string\n// 然而对于APIMetaInfo, 是不允许undefined和string, 所以拆两个接口用&\nexport type APIMeta<APIzClientType extends string = string, APIzClientMeta = any> = APIMetaWithBaseURL & Omit<APIMetaWithoutBaseURL<APIzClientType, APIzClientMeta>, '_baseURL'>;\n\nexport interface ClientRequestOptions<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any> {\n\turl: string;\n\tname: string;\n\tmeta?: APIzClientMeta;\n\toptions?: RawRequestOptions;\n\ttype?: APIzClientType;\n\tbody?: any;\n}\n\nexport type APIzClient<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> = {\n\t[K in Method]?: (options: ClientRequestOptions<RawRequestOptions, APIzClientType, APIzClientMeta>) => Promise<any>;\n}\n\nexport interface GlobalOptions<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> {\n\tclient?: Client;\n\tparamRegex?: RegExp;\n\tdefaultType?: string;\n\timmutableMeta?: boolean;\n\treset?: boolean;\n\tquerystring?(obj: object): string;\n}\n\nexport interface APIzOptions<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> {\n\tbaseURL?: string;\n\tclient?: Client;\n\timmutableMeta?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\n// emmm...这里比较尴尬, 照理来说应该是下面这样, 但是这样Method不是确定的, extends需要继承一个确定的类型\n// interface ParsedAPIMetaInfo<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase> extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method> {\ninterface ParsedAPIMetaInfo<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any> extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta> {\n\turl: string;\n\tname: string;\n\tmeta?: APIzClientMeta;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: HTTPMethodLowerCase;\n\ttype: APIzClientType;\n\tpathParams: boolean;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n};\n\nexport interface APIzRequest<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any> {\n\t// with body\n\t(body?: any, params?: KVObject, query?: KVObject | string, type?: APIzClientType): Promise<any>;\n\t// (body?: any, params?: KVObject, query?: KVObject | string): Promise<any>;\n\t(body: any, params: KVObject | string, type?: APIzClientType): Promise<any>;\n\t// (body: any, params: KVObject): Promise<any>;\n\t// (body: any, query: KVObject | string, type: T): Promise<any>;\n\t// (body: any, query: KVObject | string): Promise<any>;\n\t(body: any, type: APIzClientType): Promise<any>;\n\t// (body: any): Promise<any>;\n\t// without body\n\t(params: KVObject, query?: KVObject | string): Promise<any>;\n\t// (params: KVObject): Promise<any>;\n\t(query: KVObject | string): Promise<any>;\n\t// (): Promise<any>;\n\t(rawRequestOptions: RawRequestOptions, optionsFlag: boolean): Promise<any>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: APIzClientMeta;\n\treadonly type: APIzClientType;\n\treadonly pathParams: boolean;\n}\n\n\ntype ProxyMeta<RawRequestOptions, Meta extends APIMeta<APIzClientType, APIzClientMeta>, APIzClientType extends string = string, APIzClientMeta = any> = {\n\t[K in keyof Meta]: APIzRequest<RawRequestOptions, APIzClientType, APIzClientMeta>;\n}\n\ninterface APIzMethod<APIzClientType extends string = string, APIzClientMeta = any> {\n\tadd: (name: string, apiInfo: APIMetaInfo<APIzClientType, APIzClientMeta>) => this;\n\tremove: (name: string) => this;\n}\n\nexport type APIzInstance<RawRequestOptions, Meta extends APIMeta<APIzClientType, APIzClientMeta>, APIzClientType extends string = string, APIzClientMeta = any> =  APIzMethod<APIzClientType, APIzClientMeta> & Omit<ProxyMeta<RawRequestOptions, Meta, APIzClientType, APIzClientMeta>, 'add' | 'remove'>;\n\n\nconst toString = (Map as unknown as () => any).call.bind(Object.prototype.toString);\nconst isObj = (o: any): boolean => toString(o) === '[object Object]';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isEnumerable = (Map as unknown as () => any).call.bind(Object.prototype.propertyIsEnumerable);\n\nlet defaultType: string | undefined,\n\tglobalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\t// 这东西有没有, 是什么类型, 应该只能在运行时才能确定了, 或者分析控制流?\n\t// 那就随便写个类型吧...等到使用处as一下好了\n\tglobalClient: APIzClient<any, any, any, HTTPMethodLowerCase> | undefined,\n\tglobalImmutableMeta: boolean | undefined = false;\n\n// ES2018+, 是讲这个特性没法被babel转译,\n// 那既然都用ES2018了, 不如把能用的特性都用上好了...\nconst defaultParamRegex = /(?<=\\/):((\\w|-)+)/g,\n\tslashRegex = /(?<!:)(\\/\\/)/g,\n\tmethodMap = {\n\t\tget: noBodyRequest,\n\t\thead: noBodyRequest,\n\t\tpost: bodyRequest,\n\t\tput: bodyRequest,\n\t\tpatch: bodyRequest,\n\t\t// 尽管浏览器支持OPTIONS和DELETE带body, 但是考虑到不常用,\n\t\t// 还是默认它们不带body, 如果需要的话, 可以直接开启完整选项加入body\n\t\t// 有空改成可配置吧\n\t\toptions: noBodyRequest,\n\t\tdelete: noBodyRequest\n\t};\n\n\nfunction parseApiInfo<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase>(\n\tname: string,\n\trawInfo: UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>,\n\t{ baseURL: gBaseURL, paramRegex, querystring, client }: {\n\t\tbaseURL?: string;\n\t\tparamRegex: RegExp;\n\t\tquerystring: Serialize2QueryString;\n\t\tclient: Client;\n\t}\n): ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta> | never {\n\t// tslint:disable-next-line\n\tlet { url, baseURL, path, meta, method = 'GET' as HTTPMethodUpperCase, type = defaultType as APIzClientType, pathParams = false } = rawInfo;\n\tconst info = {} as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, '/');\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tmethod = method.toUpperCase() as HTTPMethodUpperCase;\n\tconst methodLowerCase = method.toLowerCase() as HTTPMethodLowerCase;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(method)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${method}.`);\n\t}\n\tif (!isFn((client as any)[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = method;\n\tinfo.methodLowerCase = methodLowerCase;\n\t// 前面已经确保了client实现了该method\n\tinfo[methodLowerCase] = (client as any)[methodLowerCase];\n\tinfo.type = type;\n\tinfo.pathParams = pathParams;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: KVObject): (m: string, v: string) => string | never {\n\treturn (m: string, v: string): string | never => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\n\n// 其实noBodyRequest和bodyRequest我们可以合并成一个,\n// 因为我们已经知道method了, 也就可以知道它是否会带body,\n// 但是考虑到让代码更加清晰一点, 还是拆成两个吧, 这点\n// 代码重复算是可以接受. 另一方面讲, 其实也可以让接口只\n// 实现一个request方法就好, 而不用对每个HTTP方法都实现一个\n// 对应的方法, 因为我们也可以把method传过去\nfunction noBodyRequest<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any>(this: ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>, ...args: Array<any>): Promise<any> | never {\n\tconst { methodLowerCase, pathParams, regex, querystring } = this;\n\tlet params, query, qs, url = this.url;\n\tif (args[1] === true) {\n\t\t// 接口处记得检测对象是否为空\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[0];\n\t\tquery = args[1];\n\t} else {\n\t\tquery = args[0];\n\t}\n\n\tif (params) {\n\t\turl = url.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction bodyRequest<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any>(this: ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>, ...args: Array<any>): Promise<any> | never {\n\t// $以区分全局变量\n\tconst { methodLowerCase, type: $defaultType, pathParams, regex, querystring } = this;\n\tlet params, query, body, type, qs, url = this.url;\n\tif (args[1] === true) {\n\t\treturn this[methodLowerCase]!({\n\t\t\turl,\n\t\t\ttype,\n\t\t\tname: this.name,\n\t\t\tmeta: this.meta,\n\t\t\toptions: args[0]\n\t\t});\n\t} else if (pathParams) {\n\t\tparams = args[1];\n\t\tquery = args[2];\n\t\ttype = args[3] || $defaultType;\n\t} else {\n\t\tquery = args[1];\n\t\ttype = args[2] || $defaultType;\n\t}\n\tbody = args[0];\n\n\tif (params) {\n\t\turl = url.replace(regex, replaceParams(params));\n\t} else if (pathParams) {\n\t\tthrow new Error('Path params is required.');\n\t}\n\n\t// 这里实际上会造成带body的query的集合和不带body的query的集合不一致,\n\t// 不过考虑实际情况这样的不一致也是可以接受\n\tif (isStr(query) && !query.includes('=')) {\n\t\ttype = query;\n\t} else if (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\treturn this[methodLowerCase]!({\n\t\turl,\n\t\ttype,\n\t\tbody,\n\t\tname: this.name,\n\t\tmeta: this.meta\n\t});\n}\n\nfunction createAPI<RawRequestOptions, APIzClientType extends string = string, APIzClientMeta = any>(info: ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>): APIzRequest<RawRequestOptions, APIzClientType, APIzClientMeta> | never {\n\t// const fn = methodMap[info.method]\n\tconst f = (methodMap as unknown as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>)[info.methodLowerCase];\n\t// 因为在parseApiInfo的时候已经判断过了, 所以这里不需要判断了, 可以确定f不为空\n\t// 但是如果哪天重构把前面的判断去掉了, 这里记得加回来\n\t// if (!f) {\n\t// \tthrow new Error(`APIzClient must implement ${info.methodLowerCase} method.`);\n\t// }\n\tconst fn = f!.bind(info);\n\n\t['url', 'method', 'meta', 'type', 'pathParams'].forEach((k: string) => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn fn as APIzRequest<RawRequestOptions, APIzClientType, APIzClientMeta>;\n}\n\n\n\n\n// 理想情况下是这样的\n// class APIz<T, M, N extends APIMeta<T, M>> {\n// \tpublic add: (name: string, apiInfo: APIMetaInfo<T, M>) => this;\n// \tpublic remove: (name: string) => this;\n// \t[K in key of N]: object;\n// \tconstructor(apiMeta: N, options: APIzOptions<>) {\n\t\t\n// \t}\n// }\n\n// type ProxyMeta<T, M, N extends APIMeta<T, M>> = {\n// \t[K in keyof N]: object;\n// };\n\n// TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithBody<T extends string> = ((body: any, params: KVObject, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, params: KVObject, type: T) => Promise<any>)\n// \t| ((body: any, params: KVObject) => Promise<any>)\n// \t| ((body: any, query: KVObject | string, type: T) => Promise<any>)\n// \t| ((body: any, query: KVObject | string) => Promise<any>)\n// \t| ((body: any, type: T) => Promise<any>)\n// \t| ((body: any) => Promise<any>);\n\n// // TODO 这里有重载, params还是query由配置选项中的pathParams作为隐式参数决定了\n// type APIzRequestWithoutBody = ((params: KVObject, query: KVObject | string) => Promise<any>)\n// \t| ((params: KVObject) => Promise<any>)\n// \t| ((query: KVObject | string) => Promise<any>)\n// \t| (() => Promise<any>);\n\n\n\n\n\n// type APIzConstructor<C, T extends string, M, N extends APIMeta<T, M>> =\tnew (apiMeta: N, options: APIzOptions<C>) => APIzInstance<T, M, N>;\n// class不知道怎么实现mapped types, 用function又没办法直接\n// 实现上面的constructor接口, 只能是让ts中不允许new调用, js中运行new调用了\n// 其实也没什么影响, 除了看上去不那么面向对象少个new\n// 另外泛型参数过多有什么好的解决办法?\nfunction APIz<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, Meta extends APIMeta<APIzClientType, APIzClientMeta>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase>(apiMeta: Meta, options?: APIzOptions<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>): APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta> | never {\n\tlet baseURL: string | undefined,\n\t\timmutableMeta: boolean,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString,\n\t\tclient: Client,\n\t\tmeta = {} as APIMeta<APIzClientType, APIzClientMeta>;\n\n\tisStr(apiMeta._baseURL) && (baseURL = apiMeta._baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\t// 这里undefined没什么影响, 视为boolean没问题\n\t\timmutableMeta = globalImmutableMeta as boolean,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring as Serialize2QueryString,\n\t\tclient = globalClient as Client\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tif (immutableMeta) {\n\t\tmeta = apiMeta || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apiMeta) {\n\t\t\tif (isObj(apiMeta[key])) {\n\t\t\t\tmeta[key] = parseApiInfo<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>(key, apiMeta[key as keyof APIMeta<APIzClientType, APIzClientMeta>] as UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>, groupOptions);\n\t\t\t} else if (key !== '_baseURL') {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy({}, {\n\t\tget(target: object, key: string | symbol, receiver: APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta>): any {\n\t\t\tif (!meta[key as string] || !isEnumerable(meta, key)) {\n\t\t\t\treturn Reflect.get(target, key);\n\t\t\t} else if (!(meta[key as string] as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>).init) {\n\t\t\t\tmeta[key as string] = parseApiInfo<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>(key as string, meta[key as string] as UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>, groupOptions);\n\t\t\t}\n\t\t\t// 到这里有个meta[key]在运行时从APIMetaInfo到ParsedAPIMetaInfo的类型转换\n\t\t\t// 只能是强行as了\n\t\t\tconst apiFn = createAPI(meta[key as string] as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>);\n\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\treturn apiFn;\n\t\t},\n\t\tgetPrototypeOf(): object {\n\t\t\treturn APIz.prototype;\n\t\t}\n\t});\n\n\tconst self = Object.create(pxy) as APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta>;\n\tself.remove = function (name: string): APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta> {\n\t\tthis[name] && ((meta[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\tself.add = function (name: string, apiInfo: APIMetaInfo<APIzClientType, APIzClientMeta>): APIzInstance<RawRequestOptions, Meta, APIzClientType, APIzClientMeta> {\n\t\tif (meta[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tmeta[name] = parseApiInfo<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method>(name, apiInfo as UnionToIntersection<APIMetaInfo<APIzClientType, APIzClientMeta>>, groupOptions);\n\t\t// 同前面一样存在运行时类型转换\n\t\tthis[name] = createAPI(meta[name] as ParsedAPIMetaInfo<RawRequestOptions, APIzClientType, APIzClientMeta>);\n\t\treturn this;\n\t};\n\treturn self;\n}\n\nexport { APIz };\n\nexport function config<RawRequestOptions, Client extends APIzClient<RawRequestOptions, APIzClientType, APIzClientMeta, Method>, APIzClientType extends string = string, APIzClientMeta = any, Method extends HTTPMethodLowerCase = HTTPMethodLowerCase>(\n\t{\n\t\tquerystring, paramRegex, immutableMeta, client, reset, defaultType: dt\n\t}: GlobalOptions<RawRequestOptions, Client, APIzClientType, APIzClientMeta, Method> = { reset: true }\n): void {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalImmutableMeta = immutableMeta;\n\tglobalClient = client;\n\tdefaultType = dt;\n\treset && (globalQuerystring = globalParamRegex = globalClient = defaultType = undefined, globalImmutableMeta = false);\n}\n","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultType: 'json'\n});\n\nexport * from './core';","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj: any): string {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\t(k: string) =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n}"],"names":["parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","url","path","meta","method","type","defaultType","pathParams","info","bURL","Error","isObj","TypeError","JSON","stringify","isStr","replace","slashRegex","toUpperCase","methodLowerCase","toLowerCase","includes","isFn","regex","init","replaceParams","params","m","v","encodeURIComponent","noBodyRequest","args","query","qs","options","bodyRequest","$defaultType","body","createAPI","f","methodMap","fn","bind","forEach","k","Object","defineProperty","value","enumerable","writable","APIz","apiMeta","immutableMeta","_baseURL","globalImmutableMeta","globalParamRegex","defaultParamRegex","globalQuerystring","globalClient","groupOptions","key","console","warn","pxy","Proxy","get","target","receiver","isEnumerable","Reflect","apiFn","set","getPrototypeOf","prototype","self","create","remove","add","apiInfo","config","reset","dt","RegExp","toString","Map","call","o","s","propertyIsEnumerable","head","post","put","patch","delete","obj","keys","map","Array","isArray","join"],"mappings":"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"}