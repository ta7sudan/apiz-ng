{"version":3,"file":"apiz.cjs.js","sources":["../src/core.ts","../src/querystring.ts","../src/index.ts"],"sourcesContent":["export type HTTPMethodUpperCase = 'GET' | 'POST' | 'HEAD' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS';\n\nexport type HTTPMethodLowerCase = 'get' | 'post' | 'head' | 'put' | 'patch' | 'delete' | 'options';\n\nexport type HTTPMethod = HTTPMethodUpperCase | HTTPMethodLowerCase;\n\ninterface APIInfoWithURL<ContentType, Meta> {\n\turl: string;\n\tmethod?: HTTPMethod;\n\ttype?: ContentType;\n\tmeta?: Meta;\n}\n\ninterface APIInfoWithPath<ContentType, Meta> {\n\tbaseURL?: string;\n\tpath: string;\n\tmethod?: HTTPMethod;\n\ttype?: ContentType;\n\tmeta?: Meta;\n}\n\nexport type APIInfo<ContentType = any, Meta = any> =\n\t| APIInfoWithURL<ContentType, Meta>\n\t| APIInfoWithPath<ContentType, Meta>;\n\nexport interface APIGroup<\n\tT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>\n> {\n\tbaseURL?: string;\n\tapis: T;\n}\n\nexport interface ClientRequestOptions<RawRequestOptions, ContentType, Meta> {\n\turl: string;\n\tname: string;\n\tmeta?: Meta;\n\toptions?: RawRequestOptions;\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\ttype?: ContentType;\n\thandleError?: boolean;\n}\n\nexport type APIzClientRequest<RawRequestOptions, ContentType, Meta> = (\n\toptions: ClientRequestOptions<RawRequestOptions, ContentType, Meta>\n) => Promise<any>;\n\nexport type APIzClient<\nRawRequestOptions,\nContentType,\nMeta,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = {[k in Method]: APIzClientRequest<RawRequestOptions, ContentType, Meta>};\n\nexport type Serialize2QueryString = (obj: any) => string;\n\nexport interface APIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tbaseURL?: string;\n\tclient?: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n\timmutable?: boolean;\n\tparamRegex?: RegExp;\n\tquerystring?: Serialize2QueryString;\n}\n\nexport interface GlobalAPIzOptions<\n\tRawRequestOptions,\n\tContentType,\n\tMeta,\n\tMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> {\n\tclient?: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n\tparamRegex?: RegExp;\n\tdefaultType?: ContentType;\n\timmutable?: boolean;\n\treset?: boolean;\n\tquerystring?: (obj: any) => string;\n}\n\ntype Callable = (...args: Array<any>) => any;\n\ninterface ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase> {\n\turl: string;\n\tbaseURL: string;\n\tpath: string;\n\tname: string;\n\tmeta?: Meta;\n\tmethod: HTTPMethodUpperCase;\n\tmethodLowerCase: Method;\n\ttype?: ContentType;\n\tregex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tinit: boolean;\n\tclient: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n}\n\ntype ContentTypeFrom<R> = R extends Record<string, APIInfo<infer C, infer M>>\n\t? C extends unknown\n\t\t? any\n\t\t: C\n\t: never;\n\ntype ProxyGroup<RawRequestOptions, T extends Record<string, APIInfo<any, any>>> = {\n\t[k in keyof T]: RequestWithoutThis<RawRequestOptions, ContentTypeFrom<T>>\n};\n\nexport type APIzInstance<\nRawRequestOptions = any,\nT extends Record<string, APIInfo<any, any>> = Record<string, APIInfo<any, any>>,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n> = Omit<ProxyGroup<RawRequestOptions, T>, 'remove' | 'add'> & {\n\tremove: (name: string) => APIzInstance<RawRequestOptions, T, Method>;\n\tadd: (\n\t\tname: string,\n\t\tapiInfo: T extends Record<string, infer I>\n\t\t? I extends APIInfo<infer C, infer M>\n\t\t? APIInfo<C extends unknown ? any : C, M extends unknown ? any : M>\n\t\t: never\n\t\t: never\n\t) => APIzInstance<RawRequestOptions, T, Method>;\n};\n\nexport interface APIzRequestOptions<ContentType> {\n\tbody?: any;\n\tparams?: Record<string, string>;\n\tquery?: string | Record<string, any>;\n\theaders?: Record<string, any>;\n\ttype?: ContentType;\n\thandleError?: boolean;\n}\n\nexport type RequestWithoutThis<RawRequestOptions, ContentType> = (\n\toptions?: APIzRequestOptions<ContentType> | RawRequestOptions,\n\tisRawOption?: boolean\n) => Promise<any>;\n\ntype Request<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase> = \n\t((\n\t\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>,\n\t\toptions?: APIzRequestOptions<ContentType> | RawRequestOptions,\n\t\tisRawOption?: boolean\n) => Promise<any>);\n\nexport interface APIzRequest<RawRequestOptions, ContentType, Meta> {\n\t(options: APIzRequestOptions<ContentType> | RawRequestOptions, isRawOption?: boolean): Promise<\n\t\tany\n\t>;\n\treadonly url: string;\n\treadonly method: HTTPMethodUpperCase;\n\treadonly meta: Meta;\n\treadonly type: ContentType;\n}\n\nconst toString = ((Map as unknown) as () => any).call.bind(Object.prototype.toString);\nconst isStr = (s: any): s is string => s && typeof s === 'string';\nconst isFn = (f: any): f is Callable => typeof f === 'function';\nconst isObj = (o: any): boolean => toString(o) === '[object Object]';\nconst isEnumerable = ((Map as unknown) as () => any).call.bind(\n\tObject.prototype.propertyIsEnumerable\n);\n\nlet globalQuerystring: Serialize2QueryString | undefined,\n\tglobalParamRegex: RegExp | undefined,\n\tglobalIsArgsImmutable: boolean | undefined = false,\n\tglobalClient: APIzClient<any, any, any, any> | undefined,\n\tdefaultType: any;\n\nconst defaultParamRegex = /:((\\w|-)+)/g,\n\tslashRegex = /\\/\\//g,\n\treplaceSlash = (m: string, o: number): string => (o <= 6 ? m : '/');\n\nfunction isAPIInfoWithURL<ContentType, Meta>(v: any): v is APIInfoWithURL<ContentType, Meta> {\n\treturn !!v.url;\n}\n\nfunction parseApiInfo<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase>(\n\tname: string,\n\trawInfo: APIInfo<ContentType, Meta>,\n\t{\n\t\tbaseURL: gBaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t}: {\n\tbaseURL?: string;\n\tparamRegex: RegExp;\n\tquerystring: Serialize2QueryString;\n\tclient: APIzClient<RawRequestOptions, ContentType, Meta, Method>;\n\t}\n): ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method> {\n\tconst {\n\t\tmethod = 'GET' as HTTPMethod,\n\t\ttype = defaultType as ContentType | undefined,\n\t\tmeta\n\t} = rawInfo;\n\tlet url: string | undefined, baseURL: string | undefined, path: string | undefined;\n\n\t// 照理讲放parseApiInfo外面显得更合理一点, 不过考虑到add和实例化的时候都要校验\n\tif (name === 'remove' || name === 'add') {\n\t\tthrow new Error('\"remove\" and \"add\" is preserved key.');\n\t}\n\n\tif (isAPIInfoWithURL<ContentType, Meta>(rawInfo)) {\n\t\turl = rawInfo.url;\n\t} else {\n\t\tbaseURL = rawInfo.baseURL;\n\t\tpath = rawInfo.path;\n\t}\n\n\tconst info = {} as ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>,\n\t\tbURL = baseURL || gBaseURL;\n\n\tif (!isObj(rawInfo)) {\n\t\tthrow new TypeError(`API ${name} expected an object, but received ${JSON.stringify(rawInfo)}.`);\n\t}\n\tif (isStr(url)) {\n\t\tinfo.url = url;\n\t} else if (isStr(bURL)) {\n\t\tinfo.url = (bURL + (path || '')).replace(slashRegex, replaceSlash);\n\t} else {\n\t\tthrow new Error(`API \"${name}\" must set url or baseURL correctly.`);\n\t}\n\tconst methodUpperCase = method.toUpperCase() as HTTPMethodUpperCase,\n\t\tmethodLowerCase = method.toLowerCase() as Method;\n\tif (!['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'].includes(methodUpperCase)) {\n\t\tthrow new Error(`Unsupported HTTP method: ${methodUpperCase}.`);\n\t}\n\tif (!isFn(client[methodLowerCase])) {\n\t\tthrow new Error(`client must implement a ${methodLowerCase} function.`);\n\t}\n\tconst parts = info.url.split(/\\/(?=\\w|:)/g),\n\t\toffset = /^(https?:|\\/)/.test(parts[0]) ? 2 : 1;\n\tinfo.baseURL = parts.slice(0, offset).join('/');\n\tinfo.path = `/${parts.slice(offset).join('/')}`;\n\tinfo.name = name;\n\tinfo.meta = meta;\n\tinfo.method = methodUpperCase;\n\tinfo.methodLowerCase = methodLowerCase;\n\tinfo.client = client;\n\tinfo.type = type;\n\tinfo.regex = paramRegex;\n\tinfo.querystring = querystring;\n\tinfo.init = true;\n\treturn info;\n}\n\nfunction replaceParams(params: Record<string, string>): (m: string, v: string) => string | never {\n\treturn (m: string, v: string): string | never => {\n\t\tif (params[v] == null) {\n\t\t\tthrow new Error(`Can't find a property \"${v}\" in params.`);\n\t\t}\n\t\treturn encodeURIComponent(params[v]);\n\t};\n}\n\nfunction request<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase>(\n\tthis: ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>,\n\toptions?: APIzRequestOptions<ContentType> | RawRequestOptions,\n\tisRawOption?: boolean\n): Promise<any> {\n\t// $以区分全局变量\n\tconst {\n\t\tmethodLowerCase,\n\t\ttype: $defaultType,\n\t\tregex,\n\t\tquerystring,\n\t\tbaseURL,\n\t\tpath,\n\t\tclient,\n\t\tmeta\n\t} = this;\n\tlet qs,\n\t\t// tslint:disable-next-line\n\t\t{query, params, body, headers, type, handleError} = (options as APIzRequestOptions<ContentType> | undefined) || {} as APIzRequestOptions<ContentType>,\n\t\turl = this.url;\n\n\tif (isRawOption === true) {\n\t\treturn client[methodLowerCase]({\n\t\t\turl,\n\t\t\tname: this.name,\n\t\t\thandleError,\n\t\t\toptions: options as RawRequestOptions | undefined\n\t\t});\n\t}\n\n\t// GET, HEAD没有body没有content-type, 如果加上了content-type, 会破坏get默认为简单请求的\n\t// 行为, 从而导致跨域协商\n\t// tslint:disable-next-line\n\tif (type == undefined && methodLowerCase !== 'get' && methodLowerCase !== 'head') {\n\t\ttype = $defaultType;\n\t}\n\n\tif (params) {\n\t\turl = baseURL + path.replace(regex, replaceParams(params));\n\t}\n\n\tif (query) {\n\t\tqs = querystring(query);\n\t\turl = url.includes('?') ? `${url}&${qs}` : `${url}?${qs}`;\n\t}\n\n\treturn client[methodLowerCase]({\n\t\turl,\n\t\tname: this.name,\n\t\thandleError,\n\t\tmeta,\n\t\ttype,\n\t\tbody,\n\t\theaders,\n\t\tquery\n\t});\n}\n\nfunction createAPI<RawRequestOptions, ContentType, Meta, Method extends HTTPMethodLowerCase>(\n\tinfo: ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>\n): APIzRequest<RawRequestOptions, ContentType, Meta> {\n\tconst fn = request.bind<Request<RawRequestOptions, ContentType, Meta, Method>>(info);\n\n\t['url', 'method', 'meta', 'type'].forEach((k: string) => {\n\t\tObject.defineProperty(fn, k, {\n\t\t\tvalue: (info as any)[k],\n\t\t\tenumerable: true,\n\t\t\twritable: false\n\t\t});\n\t});\n\treturn (fn as unknown) as APIzRequest<RawRequestOptions, ContentType, Meta>;\n}\n\nexport function APIz<\nRawRequestOptions = any,\nContentType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase,\nT extends Record<string, APIInfo<ContentType, Meta>> = Record<string, APIInfo<ContentType, Meta>>\n>(\n\tgroup: APIGroup<T>,\n\toptions?: APIzOptions<RawRequestOptions, ContentType, Meta, Method>\n): APIzInstance<RawRequestOptions, T, Method> {\n\tlet baseURL: string | undefined,\n\t\timmutable: boolean | undefined,\n\t\tparamRegex: RegExp,\n\t\tquerystring: Serialize2QueryString | undefined,\n\t\tclient: APIzClient<RawRequestOptions, ContentType, Meta, Method> | undefined,\n\t\tapiInfoGroup = {} as Record<\n\t\t\tstring,\n\t\t\tParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method> | APIInfo<ContentType, Meta>\n\t\t>;\n\n\tisStr(group.baseURL) && (baseURL = group.baseURL);\n\n\t({\n\t\tbaseURL = baseURL,\n\t\timmutable = globalIsArgsImmutable,\n\t\tparamRegex = globalParamRegex || defaultParamRegex,\n\t\t// 这里querystring虽然可能为undefined, 但是后面立马检测了是否为callable,\n\t\t// 为了给js用户提示, 所以这里也可以暂时视为不为undefined\n\t\tquerystring = globalQuerystring,\n\t\tclient = globalClient\n\t} = options || {});\n\n\tif (!isFn(querystring)) {\n\t\tthrow new Error('A querystring function must set.');\n\t}\n\n\tif (!client) {\n\t\tthrow new Error('A client must set.');\n\t}\n\n\tconst groupOptions = {\n\t\tbaseURL,\n\t\tparamRegex,\n\t\tquerystring,\n\t\tclient\n\t};\n\n\tconst apis = group.apis;\n\n\tif (immutable) {\n\t\tapiInfoGroup = apis || {};\n\t} else {\n\t\t// 不用Object.keys, 允许配置对象继承\n\t\tfor (const key in apis) {\n\t\t\t// tslint:disable-next-line\n\t\t\tif (isObj(apis[key])) {\n\t\t\t\tapiInfoGroup[key] = parseApiInfo<RawRequestOptions, ContentType, Meta, Method>(\n\t\t\t\t\tkey,\n\t\t\t\t\tapis[key],\n\t\t\t\t\tgroupOptions\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`The ${key} in meta is not an object.`);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst pxy = new Proxy(\n\t\t{},\n\t\t{\n\t\t\tget(target: object, key: string, receiver: APIzInstance<RawRequestOptions, T, Method>): any {\n\t\t\t\tif (!apiInfoGroup[key] || !isEnumerable(apiInfoGroup, key)) {\n\t\t\t\t\treturn Reflect.get(target, key);\n\t\t\t\t} else if (\n\t\t\t\t\t!(apiInfoGroup[key] as ParsedAPIInfo<RawRequestOptions, ContentType, Meta, Method>).init\n\t\t\t\t) {\n\t\t\t\t\tapiInfoGroup[key] = parseApiInfo<RawRequestOptions, ContentType, Meta, Method>(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tapiInfoGroup[key],\n\t\t\t\t\t\tgroupOptions\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst apiFn = createAPI(apiInfoGroup[key] as ParsedAPIInfo<\n\t\t\t\t\tRawRequestOptions,\n\t\t\t\t\tContentType,\n\t\t\t\t\tMeta,\n\t\t\t\t\tMethod\n\t\t\t\t>);\n\t\t\t\tReflect.set(receiver, key, apiFn);\n\t\t\t\treturn apiFn;\n\t\t\t},\n\t\t\tgetPrototypeOf(): object {\n\t\t\t\treturn APIz.prototype;\n\t\t\t}\n\t\t}\n\t);\n\n\tconst self = Object.create(pxy) as APIzInstance<RawRequestOptions, T, Method>;\n\n\tself.remove = function (name: string): APIzInstance<RawRequestOptions, T, Method> {\n\t\tthis[name] && ((apiInfoGroup[name] as any) = (this[name] as any) = undefined);\n\t\treturn this;\n\t};\n\n\tself.add = function (\n\t\tname: string,\n\t\tapiInfo: APIInfo<ContentType, Meta>\n\t): APIzInstance<RawRequestOptions, T, Method> {\n\t\tif (apiInfoGroup[name]) {\n\t\t\tthrow new Error(`API \"${name}\" already exists.`);\n\t\t}\n\t\tapiInfoGroup[name] = parseApiInfo<RawRequestOptions, ContentType, Meta, Method>(\n\t\t\tname,\n\t\t\tapiInfo,\n\t\t\tgroupOptions\n\t\t);\n\t\t// 同前面一样存在运行时类型转换\n\t\t(this as any)[name] = createAPI(apiInfoGroup[name] as ParsedAPIInfo<\n\t\t\tRawRequestOptions,\n\t\t\tContentType,\n\t\t\tMeta,\n\t\t\tMethod\n\t\t>);\n\t\treturn this;\n\t};\n\n\treturn self;\n}\n\nexport function config<\nRawRequestOptions,\nContentType = any,\nMeta = any,\nMethod extends HTTPMethodLowerCase = HTTPMethodLowerCase\n>(\n\t{\n\t\tquerystring,\n\t\tparamRegex,\n\t\timmutable,\n\t\tclient,\n\t\treset,\n\t\tdefaultType: dt\n\t}: GlobalAPIzOptions<RawRequestOptions, ContentType, Meta, Method> = {reset: true}\n): void {\n\tisFn(querystring) && (globalQuerystring = querystring);\n\tparamRegex instanceof RegExp && (globalParamRegex = paramRegex);\n\tglobalIsArgsImmutable = immutable;\n\tglobalClient = client;\n\tdefaultType = dt;\n\treset &&\n\t\t((globalQuerystring = globalParamRegex = globalClient = defaultType = undefined),\n\t\t(globalIsArgsImmutable = false));\n}","import { Serialize2QueryString } from './core';\n\nexport const querystring: Serialize2QueryString = function (obj: any): string {\n\tif (Object.prototype.toString.call(obj) === '[object Object]') {\n\t\treturn Object.keys(obj)\n\t\t\t.map(\n\t\t\t\t(k: string) =>\n\t\t\t\t\tArray.isArray(obj[k])\n\t\t\t\t\t\t? obj[k]\n\t\t\t\t\t\t\t.map((v: any) => `${encodeURIComponent(k)}=${encodeURIComponent(v == null ? '' : v)}`)\n\t\t\t\t\t\t\t.join('&')\n\t\t\t\t\t\t: `${encodeURIComponent(k)}=${encodeURIComponent(obj[k] == null ? '' : obj[k])}`\n\t\t\t)\n\t\t\t.join('&');\n\t} else if (typeof obj === 'string') {\n\t\treturn obj;\n\t} else {\n\t\treturn JSON.stringify(obj);\n\t}\n};","import { config } from './core';\nimport { querystring } from './querystring';\n\nconfig({\n\tquerystring,\n\tdefaultType: 'json'\n});\n\nexport * from './core';"],"names":["toString","Map","call","bind","Object","prototype","isStr","s","isFn","f","isObj","o","isEnumerable","propertyIsEnumerable","globalQuerystring","globalParamRegex","globalClient","defaultType","globalIsArgsImmutable","defaultParamRegex","slashRegex","replaceSlash","m","isAPIInfoWithURL","v","url","parseApiInfo","name","rawInfo","baseURL","gBaseURL","paramRegex","querystring","client","method","type","meta","path","Error","info","bURL","TypeError","JSON","stringify","replace","methodUpperCase","toUpperCase","methodLowerCase","toLowerCase","includes","parts","split","offset","test","slice","join","regex","init","replaceParams","params","encodeURIComponent","request","options","isRawOption","$defaultType","qs","query","body","headers","handleError","createAPI","fn","forEach","k","defineProperty","value","enumerable","writable","APIz","group","immutable","apiInfoGroup","groupOptions","apis","key","console","warn","pxy","Proxy","get","target","receiver","Reflect","apiFn","set","getPrototypeOf","self","create","remove","add","apiInfo","config","reset","dt","RegExp","obj","keys","map","Array","isArray"],"mappings":"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"}